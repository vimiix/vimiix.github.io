<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Hi, I'm Vimiix</title><link>http://www.vimiix.com/vimiix-blog/categories/git/</link><description>Recent content in git on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Thu, 08 Nov 2018 23:22:48 +0000</lastBuildDate><atom:link href="http://www.vimiix.com/vimiix-blog/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>快速切换本地Git用户记录</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-11-08-change-git-account-by-script/</link><pubDate>Thu, 08 Nov 2018 23:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-11-08-change-git-account-by-script/</guid><description>&lt;p>现在大部分的科技公司开发模式，都是基于 Git 进行多人协作开发。所以，对于我们每一个开发者来说，Git 的操作就是必不可少的技能了（不是锦上添花，而是必不可少）。对于 Git 的操作，不是本次记录的内容，网上的&lt;a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80">教程&lt;/a>可以在官网找到。&lt;/p>
&lt;p>今天我想记录一下我本机多用户管理的一点小操作。&lt;/p>
&lt;p>当每进入一家新公司的时候，总会在新公司领到一个新的公司邮箱，基本上这个邮箱也就是你在公司期间进行代码开发的 git 账户。这时候，加上我们平时在 &lt;a href="https://github.com">GitHub&lt;/a> 的账户，就会有两个账户需要切换使用。&lt;/p>
&lt;p>下面是我个人的一点小技巧记录，不一定是最好的，但只要自己用着方便就 OK，如果此时看文章的你有好的方法的话，可以请在讨论区交流。&lt;/p></description></item><item><title>Git开发记录-合并多条commit最佳实践</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-08-13-git-best-practice/</link><pubDate>Mon, 13 Aug 2018 19:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-08-13-git-best-practice/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>常规的多人基于 GIT 协作开发的时候，都是遵循先 fork 一份主版本代码到自己的账号下面，然后基于本账户的版本，开分支来开发功能或修 Bug，完成以后再讲修改的内容，提交一个完整的 PR 贡献回主版本。&lt;/p>
&lt;p>在本分支上开发的过程中，有时候不得不先提交到自己账号下面的克隆版本中来测试（比如豆瓣的&lt;code>dae pre&lt;/code>，无法在本地生成预览，需要提交到远端），我们不能保证一次性提交就做到完美，避免不了会往复的修改后提交，这样的一次次测试用的 commit 属于是冗余的琐碎信息，对于主版本迭代是没有价值的。如果直接在基于该分支提交 PR，甚至被&lt;code>merge&lt;/code>到&lt;code>upstream/master&lt;/code>主版本中，这些不必要的 commit 信息也会包含进主版本中。这当然不是一个理想的迭代方式。&lt;/p>
&lt;p>现在问题明确以后，就是一个目标：&lt;strong>将这些开发中的所有 commit 都合并为一条有意义的 commit 信息提交给主版本&lt;/strong>。&lt;/p></description></item><item><title>[笔记]git push卡主不动问题记录：Git push hangs on POST git-receive-pack</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-03-18-git-push-hangs-on-chunked/</link><pubDate>Sun, 18 Mar 2018 18:20:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-03-18-git-push-hangs-on-chunked/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>昨天完成了&lt;a href="https://github.com/pythonzhichan/django-beginners-guide/blob/master/ClassBasedViews.md">《一个完整的 Django 入门指南》 - 第 6 部分&lt;/a>的翻译工作，本地在翻译的过程中，存储了十几张原文中的 &lt;code>png&lt;/code> 格式的插图。&lt;/p>
&lt;p>在 &lt;code>git push&lt;/code> 提交 &lt;strong>github&lt;/strong> 仓库的时候，终端显示写成功 100%, 但是一直卡在了下面这里没有推送成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Counting objects: 21, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Delta compression using up to &lt;span style="color:#ae81ff">8&lt;/span> threads.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Compressing objects: 100% &lt;span style="color:#f92672">(&lt;/span>21/21&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Writing objects: 100% &lt;span style="color:#f92672">(&lt;/span>21/21&lt;span style="color:#f92672">)&lt;/span>, 1018.52 KiB | 17.87 MiB/s, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 7&lt;span style="color:#f92672">)&lt;/span>, reused &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 卡在这里&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>