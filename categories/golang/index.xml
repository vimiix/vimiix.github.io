<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Hi, I'm Vimiix</title><link>https://www.vimiix.com/categories/golang/</link><description>Recent content in golang on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2024, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Fri, 15 Dec 2023 00:50:48 +0000</lastBuildDate><atom:link href="https://www.vimiix.com/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>SSX，一个有记忆的 ssh 客户端</title><link>https://www.vimiix.com/posts/2023-12-15-ssx/</link><pubDate>Fri, 15 Dec 2023 00:50:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2023-12-15-ssx/</guid><description>&lt;h2 id="需求来源">需求来源&lt;/h2>
&lt;p>对于一个后端程序员来说，在工作中免不了要和繁杂的服务器打交道，ssh 是不可或缺的开发工具。但每次登录都需要输入密码的行为，对于认为一切皆可自动化的程序员来说，肯定是有点繁琐的（如果您是使用图形化界面的用户可忽略）。&lt;/p>
&lt;p>所以我在前段时间考虑，我应该自己实现一个 ssh 客户端，它不需要拥有许多复杂的功能，只需要满足我以下这几个需求即可满足日常使用：&lt;/p>
&lt;ul>
&lt;li>和 ssh 保持差不多的使用习惯&lt;/li>
&lt;li>仅在第一次登录时询问我密码，后续使用无需再提供密码&lt;/li>
&lt;li>可以给服务器它任意的标签，这样我就可以自由地通过IP 或者标签来登录&lt;/li>
&lt;/ul>
&lt;p>于是乎，近期我在业余时间就设计并编写了 &lt;a href="https://github.com/vimiix/ssx">ssx&lt;/a> 这个轻量级的具有记忆的 ssh 客户端。它完美的实现了上面我所需要的功能，也已经被我愉快的应用到了日常的开发中。&lt;/p></description></item><item><title>Shell 函数实现Go语言多版本管理轻量级方案</title><link>https://www.vimiix.com/posts/2023-06-21-manage-go-multiple-versions/</link><pubDate>Wed, 21 Jun 2023 14:50:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2023-06-21-manage-go-multiple-versions/</guid><description>&lt;h2 id="现有的工具方案">现有的工具方案&lt;/h2>
&lt;ul>
&lt;li>gvm: &lt;a href="https://github.com/moovweb/gvm">https://github.com/moovweb/gvm&lt;/a>&lt;/li>
&lt;li>g: &lt;a href="https://github.com/voidint/g">https://github.com/voidint/g&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="我的方案">我的方案&lt;/h2>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>原生：基于 go 语言本身支持多版本的能力实现，可以下载任何官方发布的版本&lt;/li>
&lt;li>简单：shell 函数实现，直接集成到 bashrc 或 zshrc 中即可使用，无需额外配置&lt;/li>
&lt;li>可定制化：代码简单可根据自身需求定制&lt;/li>
&lt;/ul></description></item><item><title>使用SQLAlchemy以多IP方式连接openGauss数据库</title><link>https://www.vimiix.com/posts/2021-07-08-opengauss-driver-and-orm/</link><pubDate>Thu, 08 Jul 2021 23:38:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2021-07-08-opengauss-driver-and-orm/</guid><description>&lt;h3 id="前置声明">前置声明&lt;/h3>
&lt;blockquote>
&lt;p>由于 &lt;a href="https://opengauss.org/zh/">openGauss&lt;/a> 数据库本身也开源不久，所以周边基础设施也正处于遍地开花的阶段，所以本文不保证长期的时效性，仅针对现阶段的问题，提出一种解决方案。&lt;/p>
&lt;/blockquote>
&lt;h2 id="opengauss-介绍">openGauss 介绍&lt;/h2>
&lt;p>按照官网的介绍，openGauss 是一款高性能，高安全，高可靠的开源关系型数据库管理系统，采用木兰宽松许可证v2发行。openGauss内核早期源自开源数据库PostgreSQL，融合了华为在数据库领域多年的内核经验，在架构、事务、存储引擎、优化器及ARM架构上进行了适配与优化。&lt;/p>
&lt;p>openGauss 在2020年6月30日开放源代码，代码托管在 gitee 上。&lt;/p>
&lt;p>目前我所在公司也主要是做数据库方面的事情，且也基于 openGauss 内核研发了一款商业版的数据库 &lt;a href="https://enmotech.com/products/MogDB">MogDB&lt;/a>，感兴趣的也可以去了解一下。&lt;/p></description></item><item><title>Golang的并行模式实践</title><link>https://www.vimiix.com/posts/2021-04-07-concurrency-in-go/</link><pubDate>Wed, 07 Apr 2021 18:15:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2021-04-07-concurrency-in-go/</guid><description>&lt;h2 id="goroutine">Goroutine&lt;/h2>
&lt;p>C#、Lua、Python 的用户可能会发现 Go 的 goroutine 和协程之间有很多相似之处，没错，从命名上也可以看出二者具有相似性。&lt;/p>
&lt;p>但二者之间也有些区别：&lt;/p>
&lt;ul>
&lt;li>goroutine 隐含了并行的特性，一切交给 go 的 runtime 来实现调度，而协程需要应用自己来编写并行代码&lt;/li>
&lt;li>goroutine 通过信道（&lt;code>Channel&lt;/code>）进行通信；协程通过 &lt;code>yield&lt;/code> 和 &lt;code>next&lt;/code>操作进行通信&lt;/li>
&lt;/ul>
&lt;p>一般来说，goroutine 比协程更强大。而且，我们可以很容易地将协程的逻辑移植到 goroutine 来获得更好的并行效果。&lt;/p></description></item><item><title>Golang实现Windows系统用户和密码校验</title><link>https://www.vimiix.com/posts/2021-03-22-auth-windows-user-in-golang/</link><pubDate>Mon, 22 Mar 2021 16:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2021-03-22-auth-windows-user-in-golang/</guid><description>&lt;p>本质上是通过调用 windows 的一个 API —— &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-logonuserw">&lt;code>LogonUserW&lt;/code>&lt;/a> ，来实现对于用户密码的校验。&lt;/p>
&lt;blockquote>
&lt;p>仅适用于在本地校验，不支持远程连接校验&lt;/p>
&lt;/blockquote>
&lt;p>用一个示例代码来进行说明，下面是目录结构中，&lt;code>main.go&lt;/code> 是程序入口文件，auth 包中，我们仅实现 windows 系统的校验代码，其他平台不属于本文介绍内容，就直接返回 nil 即可。&lt;/p></description></item><item><title>Golang实现Google在RTB广告中价格加密方案</title><link>https://www.vimiix.com/posts/2019-11-13-google-rtb-price-in-golang/</link><pubDate>Wed, 13 Nov 2019 16:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2019-11-13-google-rtb-price-in-golang/</guid><description>&lt;h2 id="rtb">RTB&lt;/h2>
&lt;p>RTB 广告是一种实时竞价广告，就是在针对每个广告位有展示机会的时候，会实时多方竞价，价格最有优势的广告主会竞得这次展示机会，在媒体测在拿到素材的时候，需将本次成交的价格，上报给指定的监控服务器，这时就需要将实时价格按照指定的加密方案加密后，替换 GET 链接中的请求参数中的价格宏来上报。&lt;/p>
&lt;p>官方给出的源代码有 Java 和 C++ 版本, 下载地址： &lt;a href="https://code.google.com/archive/p/privatedatacommunicationprotocol/source/default/source">https://code.google.com/archive/p/privatedatacommunicationprotocol/source/default/source&lt;/a>&lt;/p>
&lt;p>本文主要通过 golang 来实现的 google 的价格&lt;a href="https://developers.google.com/authorized-buyers/rtb/response-guide/decrypt-price#encryption-scheme">加密方案&lt;/a>。&lt;/p></description></item><item><title>Golang如何确保一个类型实现了某个interface</title><link>https://www.vimiix.com/posts/2019-08-29-how-to-ensure-a-type-implements-an-interface/</link><pubDate>Thu, 29 Aug 2019 16:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2019-08-29-how-to-ensure-a-type-implements-an-interface/</guid><description>&lt;p>在 golang 中，接口（interface）代表一种『协议』存在，它是一个声明了多个方法的集合。&lt;/p>
&lt;p>接口是被隐式实现的，也就是说，我们在开发中定义一个类型（type）的时候，不需要声明这个类型实现了哪个接口。在使用的时候往往通过断言来的 ok-idom 来进行类型判断该类型是否实现了目标接口，放置调用方法失败抛出 panic：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">AType&lt;/span>.(&lt;span style="color:#a6e22e">BInterface&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ok&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果断言失败，那么 ok 的值将会是 false,但是如果断言成功 ok 的值将会是 true,同时 value 将会得到所期待的正确的值。&lt;/p></description></item></channel></rss>