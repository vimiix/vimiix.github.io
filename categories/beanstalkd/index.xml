<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>beanstalkd on Hi, I'm Vimiix</title><link>http://vimiix.com/vimiix-blog/categories/beanstalkd/</link><description>Recent content in beanstalkd on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Wed, 11 Mar 2020 16:22:48 +0000</lastBuildDate><atom:link href="http://vimiix.com/vimiix-blog/categories/beanstalkd/index.xml" rel="self" type="application/rss+xml"/><item><title>beanstalkd消息队列</title><link>http://vimiix.com/vimiix-blog/posts/2020-03-11-beanstalkd-note/</link><pubDate>Wed, 11 Mar 2020 16:22:48 +0000</pubDate><guid>http://vimiix.com/vimiix-blog/posts/2020-03-11-beanstalkd-note/</guid><description>beanstalkd 是一个简单快速的分布式工作队列系统，协议基于 ASCII 编码运行在 tcp 上。其最初设计目的是通过后台异步执行耗时任务方式降低高容量 Web 应用的页面延时。而其简单、轻量、易用等特点，和对任务优先级、延时/超时重发等控制，以及众多语言版本的客户端的良好支持，使其可以很好的在各种需要队列系统的场景中应用。
Beanstalk 的应用场景主要有：
消息异步处理（消息队列的基本需求） 消息延迟处理，实现循环队列 beanstalkd 核心组件 job : 任务，队列中的基本单元 tube : 一个有名称的任务队列，用来存储统一类型的 job ,beanstalkd 通过 tube 来实现多任务队列 producer : job 生产者，通过put命令来创建一个job放到一个tube中 comsumer : job 消费者，通过 reserve、release、bury、delete命令来获取或改变 job 的状态 job 的生命周期 在整个生命周期中 job 可能有四种工作状态：READY、RESERVED、DELAYED、BURIED. 只有处于 READY 状态的 job 才能被消费。
put with delay release with delay -------------&amp;gt; [DELAYED] &amp;lt;---------. | | | (time passes) | | | put v reserve | delete --------------&amp;gt; [READY] -------&amp;gt; [RESERVED] ------&amp;gt; *poof* ^ ^ | | | \ release | | | `-------------&amp;#39; | | | | kick | | | | bury | [BURIED] &amp;lt;---------------&amp;#39; | | delete `--------&amp;gt; *poof* Producer 创建 job 的时候可以选择两种方式：put , put with delay。</description></item></channel></rss>