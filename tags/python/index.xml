<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Hi, I'm Vimiix</title><link>https://www.vimiix.com/tags/python/</link><description>Recent content in Python on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Thu, 08 Jul 2021 23:38:48 +0000</lastBuildDate><atom:link href="https://www.vimiix.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>使用SQLAlchemy以多IP方式连接openGauss数据库</title><link>https://www.vimiix.com/posts/2021-07-08-opengauss-driver-and-orm/</link><pubDate>Thu, 08 Jul 2021 23:38:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2021-07-08-opengauss-driver-and-orm/</guid><description>前置声明 由于 openGauss 数据库本身也开源不久，所以周边基础设施也正处于遍地开花的阶段，所以本文不保证长期的时效性，仅针对现阶段的问题，提出一种解决方案。
openGauss 介绍 按照官网的介绍，openGauss 是一款高性能，高安全，高可靠的开源关系型数据库管理系统，采用木兰宽松许可证v2发行。openGauss内核早期源自开源数据库PostgreSQL，融合了华为在数据库领域多年的内核经验，在架构、事务、存储引擎、优化器及ARM架构上进行了适配与优化。
openGauss 在2020年6月30日开放源代码，代码托管在 gitee 上。
目前我所在公司也主要是做数据库方面的事情，且也基于 openGauss 内核研发了一款商业版的数据库 MogDB，感兴趣的也可以去了解一下。
背景 针对 openGauss 的基础设施不完善，我之前基于 py-postgresql 1.3.0 版本，开发了 openGauss 的 python 驱动，并提交到了 openGauss 官方仓库：https://gitee.com/opengauss/openGauss-connector-python-pyog
该驱动适用于不使用 ORM，以SQL形式交互的 python 程序。
但是在对接客户的过程中，客户提出了这样的需求：
程序中用到了 SQLAlchemy 做为ORM来和数据库交互 连接数据库时，需要支持类似 JDBC 多 IP 的方式连接（例如：user:password@host1:port1,host2:port2/db 这种形式），这种需求主要是用于后端数据库部署形态为主备架构，且没有固定的虚拟IP用于连接，所以需要将主备所有机器的IP都传递进去，但只能返回主库的连接。 赶紧去扫了一下 SQLAlchemy 的源码，SQLAlchemy 中目前支持的 pg 驱动有：
psycopg2 pg8000 asyncpg psycopg2cffi py-postgresql pygresql 其实只要在驱动里面实现了 PEP-249 (DBAPI 2.0 接口规范) 就可以。但是我们都知道，在使用 SQLAlchemy 创建 engine 的时候，需要在 :// 前面使用固定的字符串进行驱动的选择。比如 postgresql+pypostgresql://.</description></item><item><title>beanstalkd消息队列</title><link>https://www.vimiix.com/posts/2020-03-11-beanstalkd-note/</link><pubDate>Wed, 11 Mar 2020 16:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2020-03-11-beanstalkd-note/</guid><description>beanstalkd 是一个简单快速的分布式工作队列系统，协议基于 ASCII 编码运行在 tcp 上。其最初设计目的是通过后台异步执行耗时任务方式降低高容量 Web 应用的页面延时。而其简单、轻量、易用等特点，和对任务优先级、延时/超时重发等控制，以及众多语言版本的客户端的良好支持，使其可以很好的在各种需要队列系统的场景中应用。
Beanstalk 的应用场景主要有：
消息异步处理（消息队列的基本需求） 消息延迟处理，实现循环队列 beanstalkd 核心组件 job : 任务，队列中的基本单元 tube : 一个有名称的任务队列，用来存储统一类型的 job ,beanstalkd 通过 tube 来实现多任务队列 producer : job 生产者，通过put命令来创建一个job放到一个tube中 comsumer : job 消费者，通过 reserve、release、bury、delete命令来获取或改变 job 的状态 job 的生命周期 在整个生命周期中 job 可能有四种工作状态：READY、RESERVED、DELAYED、BURIED. 只有处于 READY 状态的 job 才能被消费。
put with delay release with delay -------------&amp;gt; [DELAYED] &amp;lt;---------. | | | (time passes) | | | put v reserve | delete --------------&amp;gt; [READY] -------&amp;gt; [RESERVED] ------&amp;gt; *poof* ^ ^ | | | \ release | | | `-------------' | | | | kick | | | | bury | [BURIED] &amp;lt;---------------' | | delete `--------&amp;gt; *poof* Producer 创建 job 的时候可以选择两种方式：put , put with delay。</description></item><item><title>从七牛云到阿里云的自动化迁移代码说明</title><link>https://www.vimiix.com/posts/2018-10-29-move-qiniuyun-to-alioss-analysis/</link><pubDate>Mon, 29 Oct 2018 23:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-10-29-move-qiniuyun-to-alioss-analysis/</guid><description>&lt;p>前几天叙事性的写了&lt;a href="https://vimiix.com/post/2018/10/24/move-qiniuyun-to-alioss/">一篇&lt;/a>，有点像日记，这篇分析一下代码逻辑，便于以后回顾。&lt;/p>
&lt;h3 id="工具">工具&lt;/h3>
&lt;ul>
&lt;li>python3.5&lt;/li>
&lt;li>顺手的 IDE（轻量级推荐&lt;a href="https://code.visualstudio.com/">vscode&lt;/a>）&lt;/li>
&lt;li>&lt;a href="https://github.com/qiniu/qshell#%E4%B8%8B%E8%BD%BD">qiniu/qshell&lt;/a> （本文是基于 mac 系统开发，所以使用 qshell 的 mac 版本，读者请根据自己的系统下载，也可以直接跳至文末，下载本文源码，源码中 tool 文件夹中已经下载好了 mac 下的工具。这个工具只有一步使用到，所以如果只是使用一下，可以不用研究他的所有指令）&lt;/li>
&lt;/ul></description></item><item><title>七牛云数据自动迁移到阿里云OSS</title><link>https://www.vimiix.com/posts/2018-10-24-move-qiniuyun-to-alioss/</link><pubDate>Wed, 24 Oct 2018 19:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-10-24-move-qiniuyun-to-alioss/</guid><description>&lt;h3 id="背景">背景&lt;/h3>
&lt;p>近期收到两封七牛云发来的邮件：&lt;/p>
&lt;blockquote>
&lt;p>测试域名回收通知&lt;/p>
&lt;p>您的账号 xxx 在七牛云融合 CDN 加速平台有以下测试域名&lt;strong>还剩 7 个自然日会被系统自动回收&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>由于，我博客所有的图片文件都是存储在七牛云的，这个域名也使用了一年多了，怎么突然要回收呢？&lt;/p>
&lt;p>上网一搜才知道，大概是有什么不法分子之类的，使用七牛云的免费空间传播色情暴力之类的内容，被 Godday 制裁了，现在新申请的 bucket 只能使用一个月，要想绑定域名，还得备案操作。俺这小博客，也就自己玩玩的一个国外服务器，也备不了案啊。&lt;/p>
&lt;p>无奈，看网上很多人都是被回收了才知道自己的图片都访问不了。还好我习惯性的看这些推送邮件，给自己留了一周时间用来备份转移。既然免费的不好用了，微博之类的图床不好迁移，所以就买了一年阿里云的 OSS 服务。&lt;/p>
&lt;p>虽然我的图片还算不是很多，但要是一张一张手动下载再上传到阿里云，也是不小的工作量，而且太浪费时间了。&lt;/p></description></item><item><title>pipenv错误解决:TypeError: "module" object is not callable</title><link>https://www.vimiix.com/posts/2018-10-21-solution-of-pipenv-install-error/</link><pubDate>Sun, 21 Oct 2018 11:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-10-21-solution-of-pipenv-install-error/</guid><description>&lt;h3 id="软件版本">软件版本&lt;/h3>
&lt;p>今天在折腾一台新的云主机，所以我在安装环境的时候&lt;code>pip&lt;/code>和&lt;code>pipenv&lt;/code>都选择安装了最新版本&lt;/p>
&lt;p>（&lt;em>注：正是这两个版本配合才会出现下面的报错，旧版本或以后的新版本的 Pipenv 不会出现&lt;/em>）。&lt;/p>
&lt;p>具体如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">// pipenv 的版本 2018.7.1
$ pipenv --version
pipenv, version 2018.7.1
// pip 的版本 18.1
$ pip --version
pip 18.1 from /usr/bin/python3.6/lib/python3.6/site-packages/pip &lt;span style="color:#f92672">(&lt;/span>python 3.6&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>macOXS中使用matplotlib遇到的问题及探究</title><link>https://www.vimiix.com/posts/2018-10-16-explore-the-problem-of-matplotlib-on-macosx/</link><pubDate>Tue, 16 Oct 2018 11:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-10-16-explore-the-problem-of-matplotlib-on-macosx/</guid><description>&lt;p>第一次在 mac 系统上使用&lt;strong>matplotlib&lt;/strong>库的时候，在执行的时候，往往会遇到下面这样的问题：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ImportError: Python is not installed as a framework. balabala....
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>当然这个问题很好解决，网上有一搜就会找到如下两种解决方案：&lt;/p>
&lt;h4 id="第一种方案是在系统中设置">第一种方案是在系统中设置：&lt;/h4>
&lt;ul>
&lt;li>假设你已经通过&lt;code>pip install matplotlib&lt;/code>安装了 matplotlib，那么在你的根目录中会有一个名为&lt;code>〜/ .matplotlib&lt;/code>的目录。&lt;/li>
&lt;li>在这个目录中创建一个&lt;code>matplotlibrc&lt;/code>的文件 ,在里面添加一行代码：&lt;code>backend: TkAgg&lt;/code>，保存退出即可。&lt;/li>
&lt;/ul>
&lt;p>总结为一行 shell 命令就是：&lt;code>echo &amp;quot;backend: TkAgg&amp;quot; &amp;gt;&amp;gt; ~/.matplotlib/matplotlibrc&lt;/code>&lt;/p>
&lt;p>这种方式可以设定整个系统的 matplotlib 渲染使用的引擎，但是不好的是，代码会变得不可移植，如果服务器很多，我们需要每一台机器都去设置这个参数，这时候就需要使用第二种方案。&lt;/p>
&lt;h4 id="第二种方案是在代码中设置">第二种方案是在代码中设置：&lt;/h4>
&lt;p>在引用&lt;code>matplotlib&lt;/code>库的代码之前，添加如下两行代码（确认安装 TkInter）：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib
matplotlib&lt;span style="color:#f92672">.&lt;/span>use(&lt;span style="color:#e6db74">&amp;#39;TkAgg&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样也可以临时的修改前面提到的 &lt;code>backend&lt;/code>变量。&lt;/p></description></item><item><title>浅谈Python中的上下文管理</title><link>https://www.vimiix.com/posts/2018-07-17-learn-contextlib/</link><pubDate>Wed, 18 Jul 2018 00:56:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-07-17-learn-contextlib/</guid><description>&lt;h2 id="with-语法">with 语法&lt;/h2>
&lt;p>平常在写 Python 代码的时候，经常会用到&lt;code>with&lt;/code> 来处理一个上下文环境，比如文件的打开关闭，数据库的连接关闭等等。&lt;/p>
&lt;p>&lt;code>with&lt;/code>语法的使用，需要我们处理的对象实现&lt;code>__enter__&lt;/code>和&lt;code>__exit__&lt;/code>两个魔术方法来支持。&lt;code>__enter__&lt;/code>函数处理逻辑函数之前需要做的事情，并返回操作对象作为&lt;code>as&lt;/code>后面的变量，&lt;code>__exit__&lt;/code>函数处理当代码离开&lt;code>with&lt;/code>代码块以后的事情。&lt;/p>
&lt;p>&lt;code>with&lt;/code>语法非常方便的让我使用资源并且不用操心忘记后续操作所带来的隐患。&lt;/p></description></item><item><title>《算法图解》读书笔记7-狄克斯特拉算法</title><link>https://www.vimiix.com/posts/2018-06-05-grokking-algorithms-chapter-7/</link><pubDate>Mon, 16 Jul 2018 22:20:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-06-05-grokking-algorithms-chapter-7/</guid><description>&lt;h2 id="概念">概念&lt;/h2>
&lt;blockquote>
&lt;p>狄克斯特拉算法是从一个顶点到其余各顶点的最短路径算法，解决的是有向图中最短路径问题 (该算法不能处理包含负边的图)。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。&lt;/p>
&lt;/blockquote></description></item><item><title>[译]python中垃圾回收和析构函数笔记</title><link>https://www.vimiix.com/posts/2018-06-04-python-destructor-and-garbage-collection-notes/</link><pubDate>Mon, 04 Jun 2018 14:36:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-06-04-python-destructor-and-garbage-collection-notes/</guid><description>&lt;blockquote>
&lt;p>紧接上一篇转载的文章&lt;a href="https://vimiix.com/post/2018/06/04/python-magic-methods/">《Python 魔术方法总结》&lt;/a>文末提及的英文参考文章，洒家顺手就翻译了一下。方便墙内的同学学习。这篇文章不仅指出了 Python 如何处理垃圾回收，还提到了我们作为程序员不应该只借助现代化 IDE 的函数提示功能去完成代码，应该多去看官方的完整文档，可以知道哪些函数被废弃的，哪些函数在使用时需要注意什么等等一些很重要的信息。话不多说，自己体会，请向下阅读文章吧。&lt;/p>
&lt;p>原文链接：&lt;a href="https://www.electricmonk.nl/log/2008/07/07/python-destructor-and-garbage-collection-notes/">https://www.electricmonk.nl/log/2008/07/07/python-destructor-and-garbage-collection-notes/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>我很少在 Python 对象中使用析构函数。我猜 Python 的动态特性往往弱化了对析构函数的需求。但是现在，假如我需要在对象被销毁时，或者更确切地说，当程序退出时，要将一些数据写入磁盘。这时我会使用&lt;code>__del__&lt;/code> 魔术方法在主要操作的类对象中定义了一个析构函数。但是奇怪的是，这个析构函数自始至终都没有被调用到。不仅在程序退出时没有被调用到，而且我手动使用&lt;code>del&lt;/code>删除时也不会被调用。由于这个程序是我前一段时间写的，所有稍微有点不是很熟悉了，这导致我怀疑是我程序中有一个大的 BUG 存在。&lt;/p></description></item><item><title>[转]Python中的魔术方法汇总</title><link>https://www.vimiix.com/posts/2018-06-04-python-magic-methods/</link><pubDate>Mon, 04 Jun 2018 13:20:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-06-04-python-magic-methods/</guid><description>&lt;blockquote>
&lt;p>这是一篇很不错的总结文章，简单易理解，洒家忍不住要转载收藏一下。&lt;/p>
&lt;p>源文链接：&lt;a href="http://algo.site/?cat=60">http://algo.site/?cat=60&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="基础">基础:&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>如果你想…&lt;/th>
&lt;th>所以,你写…&lt;/th>
&lt;th>Python 调用…&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>初始化一个实例&lt;/td>
&lt;td>&lt;code>x = MyClass()&lt;/code>&lt;/td>
&lt;td>&lt;code>x.__init__()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>作为一个字符串的&amp;quot;官方&amp;quot;表示&lt;/td>
&lt;td>&lt;code>repr(x)&lt;/code>&lt;/td>
&lt;td>&lt;code>x.__repr__()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>作为一个字符串&lt;/td>
&lt;td>&lt;code>str(x)&lt;/code>&lt;/td>
&lt;td>&lt;code>x.__str__()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>作为字节数组&lt;/td>
&lt;td>&lt;code>bytes(x)&lt;/code>&lt;/td>
&lt;td>&lt;code>x.__bytes__()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>作为格式化字符串&lt;/td>
&lt;td>&lt;code>format(x, format_spec)&lt;/code>&lt;/td>
&lt;td>&lt;code>x.__format__(format_spec)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>[python]记录关于websocket的原理和使用</title><link>https://www.vimiix.com/posts/2018-04-02-python-websocket/</link><pubDate>Mon, 02 Apr 2018 19:20:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-04-02-python-websocket/</guid><description>&lt;h2 id="什么是-websocket">什么是 websocket&lt;/h2>
&lt;p>WebSocket 是一种在单个 TCP 连接上进行&lt;a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%99%E5%B7%A5">全双工&lt;/a>通讯的协议。WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建&lt;strong>持久性&lt;/strong>的连接，并进行双向数据传输。&lt;/p>
&lt;p>Websocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说的。&lt;/p>
&lt;p>举个例子：&lt;/p>
&lt;blockquote>
&lt;p>HTTP 的生命周期通过 Request 来界定，也就是发送一次 Request，收到一次 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了&lt;/p>
&lt;p>在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response ， 在 HTTP 中永远是这样，也就是说一个 request 只能有一个 response。而且这个 response 也是被动的，不能主动发起。&lt;/p>
&lt;p>而对于 websocket 来说，在 HTTP 的握手基础上建立起链接，服务器端可以主动的向客户端发送数据。&lt;/p>
&lt;/blockquote></description></item><item><title>[Python]使用pipenv管理python虚拟环境</title><link>https://www.vimiix.com/posts/2018-03-11-manage-your-virtualenv-with-pipenv/</link><pubDate>Sun, 11 Mar 2018 18:20:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-03-11-manage-your-virtualenv-with-pipenv/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>近期的项目中，我开始尝试着从 virtualenv 管理 python 虚拟环境，切换到用 pipenv 来管理。&lt;/p>
&lt;p>经过一段时间的使用，着实觉得 pipenv 使用的更加顺手，更加的便捷。这当然也延续了 &lt;a href="https://www.kennethreitz.org/">Kenneth&lt;/a> 大神一贯的项目作风&amp;ndash; &lt;strong>&lt;code>For Humans&lt;/code>&lt;/strong> 。&lt;/p>
&lt;p>再配合上 &lt;strong>&lt;code>autoenv&lt;/code>&lt;/strong>（自动激活虚拟环境的工具），更加的 Perfect！&lt;/p></description></item><item><title>[Python]Uvicorn初体验</title><link>https://www.vimiix.com/posts/2018-02-26-first-practise-of-uvicorn/</link><pubDate>Mon, 26 Feb 2018 12:20:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-02-26-first-practise-of-uvicorn/</guid><description>&lt;h2 id="uvicorn-简介">uvicorn 简介&lt;/h2>
&lt;p>&lt;code>uvicorn&lt;/code>是一个基于&lt;code>asyncio&lt;/code>开发的一个轻量级高效的 web 服务器框架。&lt;/p>
&lt;blockquote>
&lt;p>官网：&lt;a href="http://www.uvicorn.org">http://www.uvicorn.org&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>uvicorn&lt;/code> 设计的初衷是想要实现两个目标：&lt;/p>
&lt;ul>
&lt;li>使用&lt;a href="https://github.com/MagicStack/uvloop">&lt;code>uvloop&lt;/code>&lt;/a>和&lt;a href="https://github.com/MagicStack/httptools">&lt;code>httptools&lt;/code>&lt;/a>实现一个极速的&lt;code>asyncio&lt;/code>服务器。&lt;/li>
&lt;li>实现一个基于&lt;a href="http://channels.readthedocs.io/en/stable/asgi.html">&lt;code>ASGI(异步服务器网关接口)&lt;/code>&lt;/a>的最小的应用程序接口。&lt;/li>
&lt;/ul>
&lt;p>它目前支持&lt;code>http&lt;/code>，&lt;code>websockets&lt;/code>，&lt;code>Pub/Sub&lt;/code> 广播，并且可以扩展到其他协议和消息类型。&lt;/p></description></item><item><title>[算法笔记]动态规划之最长公共子串和最长公共子序列</title><link>https://www.vimiix.com/posts/2018-02-07-dp-note/</link><pubDate>Wed, 07 Feb 2018 12:27:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-02-07-dp-note/</guid><description>&lt;blockquote>
&lt;p>本文是《算法图解》笔记&lt;/p>
&lt;/blockquote>
&lt;h2 id="应用场景">应用场景&lt;/h2>
&lt;p>一切脱离实际应用场景的算法都是耍流氓！&lt;/p>
&lt;ul>
&lt;li>生物学家根据最长公共序列来确定 DNA 链的相似性，进而判断两种动物或疾病有多相似。最长公共序列还被用来寻找多发性硬化症治疗方案。&lt;/li>
&lt;li>源代码管理中，&lt;code>git diff&lt;/code>指令，可以查找出编辑前后文件的差异，这是基于动态规划实现的。&lt;/li>
&lt;li>编辑距离（&lt;code>levenshtein distance&lt;/code>），判断字符串的相似程度，也是基于动态规划计算。可以通过这个技术从拼写检查到判断用户上传的资料是否是盗版。（&lt;em>这样看来，我猜想大学论文查重应该也是基于动态规划算法:P&lt;/em>）&lt;/li>
&lt;li>Microsoft Word 等软件中具有断字功能，使用动态规划可以确定什么地方断字以确保行长一致。&lt;/li>
&lt;/ul></description></item><item><title>[Python]python如何方便的操作MySQL和Oracle数据库</title><link>https://www.vimiix.com/posts/2018-01-30-how-to-connect-mysql-and-oracle/</link><pubDate>Tue, 30 Jan 2018 01:27:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-01-30-how-to-connect-mysql-and-oracle/</guid><description>&lt;h1 id="环境">环境&lt;/h1>
&lt;ul>
&lt;li>python3 &lt;a href="https://www.python.org/downloads/release/python-364/">官方网站下载&lt;/a>&lt;/li>
&lt;li>pymysql &lt;code>pip3 install pymysql&lt;/code>&lt;/li>
&lt;li>cx_Oracle &lt;code>pip3 install cx-Oracle&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>[python]web框架中的代码自动重载怎么实现</title><link>https://www.vimiix.com/posts/2018-01-08-autoreload-code-in-python/</link><pubDate>Mon, 08 Jan 2018 22:37:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-01-08-autoreload-code-in-python/</guid><description>&lt;p>在开发和调试 wsgi 应用程序时，有很多方法可以自动重新加载代码。例如，如果你使用的是&lt;code>werkzeug&lt;/code>，则只需要传&lt;code>use_reloader&lt;/code>参数即可：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">run_sumple(&lt;span style="color:#e6db74">&amp;#39;127.0.0.1&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>, app, use_reloader&lt;span style="color:#f92672">=&lt;/span>True)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 Flask,实际上在内部使用 werkzeug，所以你需要设置 debug = true：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">app&lt;span style="color:#f92672">.&lt;/span>run(debug&lt;span style="color:#f92672">=&lt;/span>True)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>django 会在你修改任何代码的时候自动为你重新加载：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">python manage&lt;span style="color:#f92672">.&lt;/span>py runserver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有这些例子在本地开发的时候都非常有用，但是，建议不要在实际生产中使用。&lt;/p>
&lt;p>作为学习，可以一起来看一下，python 是如何让代码自动地重新加载的？&lt;/p></description></item><item><title>[python]ImportError:attempted relative import with no known parent package</title><link>https://www.vimiix.com/posts/2017-12-29-import-error-relative-no-parent/</link><pubDate>Fri, 29 Dec 2017 12:37:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-29-import-error-relative-no-parent/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在这篇文章中，我将会解析 &lt;code>ImportError: attempted relative import with no known parent package&lt;/code> 这个异常的原因。当你在运行的 python 脚本。使用了相对引用方式 &lt;em>(类似&lt;code>import ..module&lt;/code>)&lt;/em> 去引用包时，可能会出现这个异常。&lt;/p></description></item><item><title>[译]关于python字典类型最疯狂的表达方式</title><link>https://www.vimiix.com/posts/2017-12-28-python-mystery-dict-expression/</link><pubDate>Thu, 28 Dec 2017 10:31:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-28-python-mystery-dict-expression/</guid><description>&lt;p>&lt;a href="https://juejin.im/post/5a4459b05188257d6a7ed76b">
&lt;figure>
&lt;img src="https://badge.juejin.im/entry/5a4459c9f265da43112080ea/likes.svg?style=flat-square" alt="" />
&lt;/figure>
&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>一篇来自 &lt;a href="https://dbader.org/blog/python-mystery-dict-expression">Dan Bader&lt;/a> 的有趣的博文，一起来学习一下，如何去研究一个意外的 Python 现象。&lt;/p>
&lt;/blockquote></description></item><item><title>写Flask应用时的一些优雅技巧</title><link>https://www.vimiix.com/posts/2017-12-18-some-useful-tricks-in-flask/</link><pubDate>Mon, 18 Dec 2017 18:56:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-18-some-useful-tricks-in-flask/</guid><description>&lt;h2 id="借助find_modulesimport_string优雅地注册蓝图模块">借助&lt;code>find_modules&lt;/code>,&lt;code>import_string&lt;/code>优雅地注册蓝图模块&lt;/h2>
&lt;p>&lt;a href="http://werkzeug.pocoo.org/docs/0.13/utils/#werkzeug.utils.find_modules">&lt;code>find_modules&lt;/code>&lt;/a>, &lt;a href="http://werkzeug.pocoo.org/docs/0.13/utils/#werkzeug.utils.import_string">&lt;code>import_string&lt;/code>&lt;/a>这两个函数包含在&lt;code>werkzeug.utils&lt;/code>工具包中，借助着两个工具函数可以帮助我们在更优雅的给应用注册&lt;code>blueprint&lt;/code>模块，尤其是当项目中&lt;code>blueprint&lt;/code>模块很多的时候，会节省很多行代码，看起来更加的舒服。&lt;/p></description></item><item><title>[译]python中的global和nonlocal的实践</title><link>https://www.vimiix.com/posts/2017-12-14-global-and-nonlocal-variable-in-python/</link><pubDate>Thu, 14 Dec 2017 18:51:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-14-global-and-nonlocal-variable-in-python/</guid><description>&lt;blockquote>
&lt;p>今天的博文翻译是关于 python 中 global 和 nonlocal 两个关键字的用法，原文的作者是来自孟加拉国的&lt;a href="https://twitter.com/subeen">Tamim Shahriar&lt;/a>，他的&lt;a href="http://love-python.blogspot.com.br/?view=classic">博客&lt;/a>非常适合新手朋友去阅读，都是简短而有意义的 python 实践。&lt;/p>
&lt;/blockquote>
&lt;p>我们大多数人都对 Python 中的全局变量很熟悉了。如果我们在一个模块中声明全局变量，模块内部的任何函数都可以访问这个全局变量。（模块可以理解为一个&lt;code>python&lt;/code>文件或&lt;code>.py&lt;/code>文件）&lt;/p></description></item><item><title>[译]Python的enumerate()函数揭秘</title><link>https://www.vimiix.com/posts/2017-12-13-pythons-enumerate-function-demystified/</link><pubDate>Wed, 13 Dec 2017 19:51:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-13-pythons-enumerate-function-demystified/</guid><description>&lt;blockquote>
&lt;p>今天的原文的作者是来自国外的一位 Python“布道师”&lt;a href="https://dbader.org">Dan Bader&lt;/a>，他的博客完全就是一个个人品牌的学校。有跟多 Python 技巧，有很多他录制的 Youtube 视频，国内的 Pythonista 们，不妨订阅一下他的每周邮件推送。&lt;a href="https://www.getdrip.com/forms/80014959/submissions/new">订阅链接&lt;/a>&lt;/p>
&lt;p>今天的译文是他博客中的一篇，点击&lt;a href="https://dbader.org/blog/python-enumerate">查看原文&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>如何以去写以及为什么你应该使用 Python 中的内置枚举函数来编写更干净更加 Pythonic 的循环语句？&lt;/p></description></item><item><title>[译]编码，编码，编码!提高编程技能的唯一途径</title><link>https://www.vimiix.com/posts/2017-12-12-code-code-code/</link><pubDate>Tue, 12 Dec 2017 20:51:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-12-code-code-code/</guid><description>&lt;blockquote>
&lt;p>最近博客没什么更新。工作上新项目马上要开始了，我很清楚自己的技术积累很匮乏，需要学习的东西太多了，但又不知该从何学起。以前听过一句话，不知道怎么规划学习的时候，只管学就好了。最近家里也储备了一批的新书，都还没来得及看，所以暂时不想怎么规划博客了，接下来到过年的这两个月，博客的文章将都是国外博客的译文，希望可以学习大神经验的同时提升自己的英文水平。&lt;/p>
&lt;p>今天是第一篇，来自前美国宇航局工程师，python 大神&lt;a href="https://github.com/pydanny">Daniel Roy Greenfeld&lt;/a>的博客中的一篇&lt;a href="https://www.pydanny.com/code-code-code.html">《code,code,code》&lt;/a>,旨在帮助新手程序员知道如何才能提高自己的编程技能。&lt;/p>
&lt;/blockquote></description></item><item><title>脱离Flask上下文，使用jinja2渲染html模板</title><link>https://www.vimiix.com/posts/2017-11-15-use-jinjia2-without-flask/</link><pubDate>Wed, 15 Nov 2017 00:59:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-11-15-use-jinjia2-without-flask/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>首先，如果一个正常的 flask 带路由的接口，我们是不需要关心上下文对象的，Flask 做了很多“魔术”的方法，当一个 Flask 应用接收到一个请求的时候，它会在将逻辑委托给你的视图函数之前，创建好一个上下文对象。&lt;/p>
&lt;p>当我们返回的时候调用&lt;code>render_template(template, **context)&lt;/code>，就可以正常的渲染界面返回，在这个函数中，如果看一下源码就会发现，返回渲染之前，会创建一个 ctx 去获得当前环境的&lt;code>app&lt;/code>变量。然后通过这个 ctx 去渲染传进来的&lt;code>context&lt;/code>参数列表。&lt;/p></description></item><item><title>[译]Python3:变量注释</title><link>https://www.vimiix.com/posts/2017-11-02-python3-variable-annotation/</link><pubDate>Thu, 02 Nov 2017 13:12:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-11-02-python3-variable-annotation/</guid><description>&lt;p>Python 在 3.6 版中添加了一个叫做&lt;strong>变量注释&lt;/strong>的语法。变量注释简单讲就是对于类型提示的增强，这个概念是在 Python3.5 中开始引入的。变量注释的完整解释在&lt;a href="https://www.python.org/dev/peps/pep-0526">PEP 526&lt;/a>中进行了详细说明。在本文中，我们将将要的回顾一下类型提示，然后再介绍新的变量注释语法。&lt;/p></description></item><item><title>自动化DDL审核|pymysql链接Inception中踩过的几个坑</title><link>https://www.vimiix.com/posts/2017-09-28-problems-when-pymysql-connect-inception/</link><pubDate>Thu, 28 Sep 2017 19:12:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-09-28-problems-when-pymysql-connect-inception/</guid><description>&lt;p>简单整理了一下这几天使用 pymysql 链接 inception 做 sql 审核过程中出现的坑和解决方法。&lt;/p>
&lt;p>这些解决方法一定不是最漂亮的，如果有伙伴遇到同样的问题，并且有好的解决方案，请一定在留言中回一下我哦。&lt;/p>
&lt;p>先行感激！！&lt;/p></description></item><item><title>Python|寻找最大最小的N个元素几种方法</title><link>https://www.vimiix.com/posts/2017-09-15-find-largest-or-smallest-number/</link><pubDate>Fri, 15 Sep 2017 09:48:44 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-09-15-find-largest-or-smallest-number/</guid><description>&lt;p>实际的生产中，常常会需要处理一个序列，找出其中的 N 个最大或者最小的元素，这里提供几种思路，不同的情况，使用不同的搜索方式，可以更好提高我们代码的运行效率。&lt;/p></description></item><item><title>Linux|CentOS系统yum安装pip及遇到的问题解决方法</title><link>https://www.vimiix.com/posts/2017-08-27-pip-setup-and-solve-problems/</link><pubDate>Sun, 27 Aug 2017 14:16:25 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-08-27-pip-setup-and-solve-problems/</guid><description>&lt;p>&lt;strong>pip 是一个以 Python 计算机程序语言写成的软件包管理系统，他可以安装和管理软件包，另外不少的软件包也可以在“Python 软件包索引”（英语：Python Package Index，简称 PyPI）中找到。&lt;/strong>&lt;/p></description></item><item><title>Python|元组拆包和具名元组解析</title><link>https://www.vimiix.com/posts/2017-08-05-tuple-unpacking/</link><pubDate>Sat, 05 Aug 2017 17:02:29 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-08-05-tuple-unpacking/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在 Python 中元组是一个相较于其他语言比较特别的一个内置序列类型。有些 python 入门教程把元组成为“不可变的列表”，这种说法是不完备的，其并没有完整的概括元组的特点。除了用作不可变的列表，它还可以用于没有字段名的数据记录。下面的内容就围绕元组作为数据记录属性展开，并介绍带字段名的具名元组函数&lt;code>namedtuple&lt;/code>，列表属性不再本文中叙述。&lt;/p></description></item><item><title>[算法笔记]用递归和迭代的思想分别实现插入排序和选择排序</title><link>https://www.vimiix.com/posts/2017-08-02-insert-sort-and-select-sort/</link><pubDate>Wed, 02 Aug 2017 17:17:25 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-08-02-insert-sort-and-select-sort/</guid><description>&lt;h1 id="思路">思路&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;h3 id="插入排序insert-sort">插入排序（insert sort）&lt;/h3>
&lt;blockquote>
&lt;p>先归纳性的假设前 n-1 个元素已经完成排序了，现在要将第 n 个元素&lt;!-- raw HTML omitted -->向前插入&lt;!-- raw HTML omitted -->到正确的位置上。这种方式称之为&lt;strong>插入排序法&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h3 id="选择排序selection-sort">选择排序（selection sort）&lt;/h3>
&lt;blockquote>
&lt;p>先找到整个序列中最大的元素，并将其&lt;!-- raw HTML omitted -->向后放&lt;!-- raw HTML omitted -->在 n（待排序的序列末尾）的位置上，然后继续递归排序剩下的元素。这种方式称之为&lt;strong>选择排序法&lt;/strong>&lt;/p>
&lt;/blockquote></description></item><item><title>[算法笔记]使用L形砖拼接国际象棋棋盘</title><link>https://www.vimiix.com/posts/2017-08-01-cover-board-game/</link><pubDate>Tue, 01 Aug 2017 19:54:21 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-08-01-cover-board-game/</guid><description>&lt;h2 id="递归解决棋盘拼接问题">递归解决棋盘拼接问题&lt;/h2>
&lt;h3 id="题目介绍">题目介绍&lt;/h3>
&lt;p>如图所示，图中有一块角上缺了一个方格的国际象棋棋盘，现在我们想用 L 形砖拼接出这样一块棋盘。&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="http://vimiix-blog.oss-cn-qingdao.aliyuncs.com/chess-board.jpg" alt="" />
&lt;/figure>
&lt;/p></description></item><item><title>[算法笔记]侏儒排序算法实现和复杂度分析</title><link>https://www.vimiix.com/posts/2017-07-31-gnomesort/</link><pubDate>Mon, 31 Jul 2017 15:58:21 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-07-31-gnomesort/</guid><description>&lt;h1 id="侏儒排序">侏儒排序&lt;/h1>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>侏儒排序是由 Hamid Sarbazi-Azad 在 2000 年提出的，也叫愚人排序法（Stupid sort）。这种排序算法一种简单的复杂度为&lt;code>平方级&lt;/code>的排序算法，一般实际生产中不会用到。&lt;/p></description></item><item><title>vmx-manager:基于django框架开发的cmdb系统</title><link>https://www.vimiix.com/posts/2017-07-18-vmx-manager-a-cmdb-system-base-on-django/</link><pubDate>Tue, 18 Jul 2017 22:58:21 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-07-18-vmx-manager-a-cmdb-system-base-on-django/</guid><description>&lt;h2 id="系统介绍">系统介绍&lt;/h2>
&lt;p>VMX-Manager 是一个基于 Django 框架开发的一款 CMDB 管理系统，目前处于 beta 版本，功能主要包含: 管理系统管理的客户主机列表， 动态显示客户机状态信息，远程指令操作指定客户机以及主机与客户机之间的文件传输。&lt;/p></description></item><item><title>Python|内建函数getattr()函数详解</title><link>https://www.vimiix.com/posts/2017-07-10-introduce-getattr-function/</link><pubDate>Mon, 10 Jul 2017 12:08:03 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-07-10-introduce-getattr-function/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>昨天在&lt;a href="https://www.hackerrank.com">Hackerrank&lt;/a>上面练习 Python 题目的时候，题目要求从终端输入命令和参数，然后脚本获取到以后执行相应的操作（&lt;a href="https://www.hackerrank.com/challenges/py-set-discard-remove-pop">查看原题&lt;/a>），作为初级程序员，我第一思路想到的解法就是枚举（因为题目上面限制了就 3 条命令）。通过&lt;code>if ... elif...elif...&lt;/code>的分支语句就解决了。Hackerrank 有一个好处就是，每一个题目都有一个讨论区，在讨论区中往往会有超出本人能力范围的巧妙高级解法发表在里面。有个大牛在讨论区发表了自己的解法，其中就用到了 getattr 这个内建函数，这样代码的扩展性就极强了，不再局限于本题目的三条指令。下面就记录一下这个有趣的函数。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://t.cn/RKtqwu4">上述代码查看传送门&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>DevOps|SaltStack的部署和基本指令</title><link>https://www.vimiix.com/posts/2017-06-27-saltstack-setup-and-simple-cmds/</link><pubDate>Tue, 27 Jun 2017 20:08:03 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-06-27-saltstack-setup-and-simple-cmds/</guid><description>&lt;p>SaltStack 是一个服务器基础架构集中化管理平台，具备配置管理、远程执行、监控等功能，。SaltStack 基于 Python 语言实现，结合轻量级消息队列（ZeroMQ）与 python 第三方模块（Pyzmq、PyCrypto、Pyjinjia2、python-msgpack 和 PyYAML 等）构建。&lt;/p></description></item><item><title>Web|关于cookie和session一点知识</title><link>https://www.vimiix.com/posts/2017-06-22-cookie-and-session/</link><pubDate>Thu, 22 Jun 2017 16:03:54 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-06-22-cookie-and-session/</guid><description>&lt;h3 id="cookie维基百科定义httpszhwikipediaorgwikicookie">cookie(&lt;a href="https://zh.wikipedia.org/wiki/Cookie">维基百科定义&lt;/a>)&lt;/h3>
&lt;blockquote>
&lt;p>Cookie（复数形态 Cookies），中文名称为“小型文本文件”或“小甜饼”[1]，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。&lt;/p>
&lt;/blockquote></description></item><item><title>Python|使用Anaconda完成Python多环境配置</title><link>https://www.vimiix.com/posts/2017-06-01-python-multiversion-dev-anaconda/</link><pubDate>Thu, 01 Jun 2017 09:53:54 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-06-01-python-multiversion-dev-anaconda/</guid><description>&lt;p>今天是六月一号，国际儿童节，首先祝生活中的每一个宝宝（&lt;em>只要你觉得自己是宝宝，那你就是&lt;/em>）&lt;!-- raw HTML omitted -->Happy Children&amp;rsquo;s Day!!!&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>OK,言归正传，昨天开始学习 Django 开发，个人认为，作为主流趋势，我倾向于用 pyhton3.x 开发，因为 web 开发有别与其他，对于实时响应要求相对较高，python3 可以更好的优化。在刚刚结束的 Pycon2017 上，来自 Instagram 的 Lisa Guo 和 Hui Ding（两位华裔）分别介绍了&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM">Instagram 为何选择 py3 以及整个网站迁移 py3 的过程&lt;/a>。虽然还不是很具体了解其中的差别，但一个体量不小的公司做出了向 python3 迁移的举动，一定说明 python3 在 web 开发上有肯定的优势。&lt;/p></description></item><item><title>Python-from __future__ import print_function</title><link>https://www.vimiix.com/posts/2017-05-12-print-function/</link><pubDate>Fri, 12 May 2017 14:55:03 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-05-12-print-function/</guid><description>&lt;p>Python 提供了**__future__**模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性&lt;/p>
&lt;p>在 python2.x 的环境是使用下面语句，则第二句语法检查通过，第三句语法检查失败&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Python" data-lang="Python"> &lt;span style="color:#f92672">from&lt;/span> __future__ &lt;span style="color:#f92672">import&lt;/span> print_function
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;good&amp;#39;&lt;/span>) &lt;span style="color:#75715e">#可以通过执行&lt;/span>
&lt;span style="color:#66d9ef">print&lt;/span> &lt;span style="color:#e6db74">&amp;#39;bad&amp;#39;&lt;/span> &lt;span style="color:#75715e">#语法错误&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[转]Python中eval的强大与潜在风险</title><link>https://www.vimiix.com/posts/2017-05-04-how-to-use-eval/</link><pubDate>Thu, 04 May 2017 23:57:34 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-05-04-how-to-use-eval/</guid><description>这两天在做项目的过程中，遇到 eval 这个方法，不是很会用，经过一番搜索学习，特此收藏一篇乌云网深度好文，以备以后回顾。
原文出处：WooYun - 隐形人真忙
0x00 前言 eval 是 Python 用于执行 python 表达式的一个内置函数，使用 eval，可以很方便的将字符串动态执行。比如下列代码：
#!python &amp;gt;&amp;gt;&amp;gt; eval(&amp;#34;1+2&amp;#34;) 3 &amp;gt;&amp;gt;&amp;gt; eval(&amp;#34;[x for x in range(10)]&amp;#34;) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 当内存中的内置模块含有 os 的话，eval 同样可以做到命令执行：
#!python &amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; eval(&amp;#34;os.system(&amp;#39;whoami&amp;#39;)&amp;#34;) win-20140812chjadministrator 0 当然，eval 只能执行 Python 的表达式类型的代码，不能直接用它进行 import 操作，但 exec 可以。如果非要使用 eval 进行 import，则使用import：
#!python &amp;gt;&amp;gt;&amp;gt; exec(&amp;#39;import os&amp;#39;) &amp;gt;&amp;gt;&amp;gt; eval(&amp;#39;import os&amp;#39;) Traceback (most recent call last): File &amp;#34;&amp;#34;, line 1, in File &amp;#34;&amp;#34;, line 1 import os ^ SyntaxError: invalid syntax &amp;gt;&amp;gt;&amp;gt; eval(&amp;#34;__import__(&amp;#39;os&amp;#39;).</description></item><item><title>Python操作MySQL数据库</title><link>https://www.vimiix.com/posts/2017-04-20-use-python-to-operate-mysql/</link><pubDate>Thu, 20 Apr 2017 23:57:34 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-04-20-use-python-to-operate-mysql/</guid><description>&lt;p>
&lt;figure>
&lt;img src="http://vimiix-blog.oss-cn-qingdao.aliyuncs.com/python&amp;#43;mysql.jpg" alt="" />
&lt;/figure>
&lt;/p></description></item><item><title>Python-文件操作</title><link>https://www.vimiix.com/posts/2017-04-13-file-operation/</link><pubDate>Thu, 13 Apr 2017 15:50:34 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-04-13-file-operation/</guid><description>&lt;p>
&lt;figure>
&lt;img src="https://static.vimiix.com/uPic/2021-04-06/uDCgf4.jpg" alt="header" />
&lt;/figure>
&lt;/p>
&lt;h2 id="打开文件">打开文件&lt;/h2>
&lt;p>在 Pyhton 中，使用&lt;!-- raw HTML omitted -->open()&lt;!-- raw HTML omitted -->函数打开文件，并返回文件对象，拿到这个文件对象，就可以读取或修改这个文件。&lt;!-- raw HTML omitted -->open()&lt;!-- raw HTML omitted -->是一个 python 内建函数，可以直接调用。&lt;/p></description></item><item><title>Python-关于Python中闭包的一些理解</title><link>https://www.vimiix.com/posts/2017-04-09-about-closure/</link><pubDate>Sun, 09 Apr 2017 17:07:34 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-04-09-about-closure/</guid><description>&lt;p>
&lt;figure>
&lt;img src="https://static.vimiix.com/uPic/2021-04-06/rRo70V.jpg" alt="" />
&lt;/figure>
&lt;/p>
&lt;p>&lt;strong>看不懂的定义&lt;/strong>：闭包是由函数及其相关的引用环境组合而成的实体(即：闭包=函数+引用环境)。&lt;/p></description></item><item><title>Python-高阶函数习题练习</title><link>https://www.vimiix.com/posts/2017-04-08-practice-by-using-higher-order-functions/</link><pubDate>Sat, 08 Apr 2017 15:50:34 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-04-08-practice-by-using-higher-order-functions/</guid><description>&lt;p>
&lt;figure>
&lt;img src="http://vimiix-blog.oss-cn-qingdao.aliyuncs.com/map-reduce-filter.jpg" alt="" />
&lt;/figure>
&lt;/p>
&lt;h5 id="本文是针对mapreduce和filter三个高阶函数的程序练习">本文是针对map()，reduce()和filter()三个高阶函数的程序练习。&lt;/h5></description></item><item><title>自助购物机交易源码</title><link>https://www.vimiix.com/posts/2017-04-05-self-service-shopping-machine/</link><pubDate>Wed, 05 Apr 2017 18:57:34 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-04-05-self-service-shopping-machine/</guid><description>&lt;p>
&lt;figure>
&lt;img src="http://vimiix-blog.oss-cn-qingdao.aliyuncs.com/self-service-machine.jpg" alt="" />
&lt;/figure>
&lt;/p>
&lt;h5 id="本文是一篇纯源码功能上实现了自助购物机的基本交易过程">本文是一篇纯源码，功能上实现了自助购物机的基本交易过程。&lt;/h5></description></item><item><title>Python-运算符和流程控制</title><link>https://www.vimiix.com/posts/2017-04-01-operators-and-flow-control/</link><pubDate>Sat, 01 Apr 2017 14:34:20 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-04-01-operators-and-flow-control/</guid><description>&lt;p>
&lt;figure>
&lt;img src="http://vimiix-blog.oss-cn-qingdao.aliyuncs.com/operator-flow-control.jpg" alt="" />
&lt;/figure>
&lt;/p>
&lt;p>随手笔记，本篇介绍了python中的各种运算符以及2种流程控制语句。&lt;/p></description></item><item><title>Python|对于元组和字典的认识</title><link>https://www.vimiix.com/posts/2017-03-31-introduction-of-tuple-and-dict/</link><pubDate>Fri, 31 Mar 2017 15:00:06 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-03-31-introduction-of-tuple-and-dict/</guid><description>&lt;p>本篇是一篇随手笔记，记录了对于 Python 的数据类型中元组（Tuple）和字典（Dict）的一些认识，以及部分内置方法的介绍。&lt;/p></description></item><item><title>Python|py2中字符与字节之间的编解码</title><link>https://www.vimiix.com/posts/2017-03-28-encode-and-decode/</link><pubDate>Tue, 28 Mar 2017 13:56:18 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-03-28-encode-and-decode/</guid><description>&lt;p>据说，每个做 Python 开发的都被字符编码的问题搞晕过，最常见的错误就是 UnicodeEncodeError、UnicodeDecodeError，你好像知道怎么解决，遗憾的是，错误又出现在其它地方，问题总是重蹈覆辙，str 到 unicode 之间的转换用哪 decode 还是 encode 方法还特不好记，老是混淆，问题究竟出在哪里？&lt;/p></description></item><item><title>Python-SyntaxError:Non-ASCII character '\e8' in....</title><link>https://www.vimiix.com/posts/2017-03-15-syntaxerror-non-ascii-character-e8-in/</link><pubDate>Wed, 15 Mar 2017 22:53:51 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-03-15-syntaxerror-non-ascii-character-e8-in/</guid><description>&lt;h2 id="syntaxerrornon-ascii-character-e8-in-file">SyntaxError:Non-ASCII character &amp;lsquo;\e8&amp;rsquo; in File&amp;hellip;&lt;/h2></description></item></channel></rss>