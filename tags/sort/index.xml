<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sort on Hi, I'm Vimiix</title><link>https://vimiix.com/tags/sort/</link><description>Recent content in sort on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Fri, 25 May 2018 19:20:48 +0000</lastBuildDate><atom:link href="https://vimiix.com/tags/sort/index.xml" rel="self" type="application/rss+xml"/><item><title>《算法图解》读书笔记2-数组链表和选择排序</title><link>https://vimiix.com/posts/2018-05-25-grokking-algorithms-chapter-2/</link><pubDate>Fri, 25 May 2018 19:20:48 +0000</pubDate><guid>https://vimiix.com/posts/2018-05-25-grokking-algorithms-chapter-2/</guid><description>&lt;h2 id="理解数组和链表">理解数组和链表&lt;/h2>
&lt;p>链表和数组是两种基本的数据结构，他们的区别在于数据在内存中的存储方式不同。&lt;/p>
&lt;h3 id="数组">数组&lt;/h3>
&lt;p>数组在内存中是用一块连续的内存来存储数据的，数组中的每个数据地址是连续的。数组中的每个元素所占用的内存是相同的，所以，我们可以通过下标索引在常数数量级的时间内，迅速访问数组中的任何一个元素。但是要在数组中任意位置添加一个元素，就需要移动大量的元素，使得内存中空出一个位置来存放新插入的元素。同理，当删除一个元素的时候，也需要移动大量的元素，来使得删除元素以后的数组数据在内存中仍旧是连续的。&lt;/p>
&lt;p>由此可见：当对于一组数据，读取操作频繁，写操作少的情况，应该使用数组数据结构。&lt;/p></description></item><item><title>Python|寻找最大最小的N个元素几种方法</title><link>https://vimiix.com/posts/2017-09-15-find-largest-or-smallest-number/</link><pubDate>Fri, 15 Sep 2017 09:48:44 +0000</pubDate><guid>https://vimiix.com/posts/2017-09-15-find-largest-or-smallest-number/</guid><description>&lt;p>实际的生产中，常常会需要处理一个序列，找出其中的 N 个最大或者最小的元素，这里提供几种思路，不同的情况，使用不同的搜索方式，可以更好提高我们代码的运行效率。&lt;/p></description></item></channel></rss>