<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>solution on Hi, I'm Vimiix</title><link>http://www.vimiix.com/vimiix-blog/tags/solution/</link><description>Recent content in solution on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Wed, 21 Jun 2023 14:50:48 +0000</lastBuildDate><atom:link href="http://www.vimiix.com/vimiix-blog/tags/solution/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell 函数实现Go语言多版本管理轻量级方案</title><link>http://www.vimiix.com/vimiix-blog/posts/2023-06-21-manage-go-multiple-versions/</link><pubDate>Wed, 21 Jun 2023 14:50:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2023-06-21-manage-go-multiple-versions/</guid><description>现有的工具方案 gvm: https://github.com/moovweb/gvm g: https://github.com/voidint/g 我的方案 优点：
原生：基于 go 语言本身支持多版本的能力实现，可以下载任何官方发布的版本 简单：shell 函数实现，直接集成到 bashrc 或 zshrc 中即可使用，无需额外配置 可定制化：代码简单可根据自身需求定制 代码实现 gist地址：https://gist.github.com/vimiix/0927fdfbea926e869a2c631db9eeae8b
####### GOLANG VERSION MANAGE FUNCTIONS ###### # ref: https://go.dev/doc/manage-install function goinstall() { echo &amp;#34;Downloading go$1 ...&amp;#34; go install golang.org/dl/go$1@latest &amp;amp;&amp;amp; go$1 download } function gouse() { gopath=$(go env GOPATH) if test -x ${gopath}/bin/go$1; then rm -f ${gopath}/bin/go echo &amp;#34;Relink go with go$1 ...&amp;#34; ln -s ${gopath}/bin/go$1 ${gopath}/bin/go echo &amp;#34;Done&amp;#34; else echo &amp;#34;Version $1 not installed&amp;#34; fi } function golist() { current=$(go version | awk &amp;#39;{print $3}&amp;#39; | cut -c3-) for v in $(ls $(go env GOPATH)/bin | grep -E &amp;#39;go(\d.</description></item><item><title>Golang实现Google在RTB广告中价格加密方案</title><link>http://www.vimiix.com/vimiix-blog/posts/2019-11-13-google-rtb-price-in-golang/</link><pubDate>Wed, 13 Nov 2019 16:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2019-11-13-google-rtb-price-in-golang/</guid><description>RTB RTB 广告是一种实时竞价广告，就是在针对每个广告位有展示机会的时候，会实时多方竞价，价格最有优势的广告主会竞得这次展示机会，在媒体测在拿到素材的时候，需将本次成交的价格，上报给指定的监控服务器，这时就需要将实时价格按照指定的加密方案加密后，替换 GET 链接中的请求参数中的价格宏来上报。
官方给出的源代码有 Java 和 C++ 版本, 下载地址： https://code.google.com/archive/p/privatedatacommunicationprotocol/source/default/source
本文主要通过 golang 来实现的 google 的价格加密方案。
Source Code package main /* golang 实现 google 的rtb 价格加密方案 https://developers.google.com/authorized-buyers/rtb/response-guide/decrypt-price#encryption-scheme */ import ( &amp;#34;crypto/hmac&amp;#34; &amp;#34;crypto/md5&amp;#34; &amp;#34;crypto/sha1&amp;#34; &amp;#34;encoding/base64&amp;#34; &amp;#34;encoding/binary&amp;#34; &amp;#34;encoding/hex&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;hash&amp;#34; &amp;#34;math&amp;#34; &amp;#34;strings&amp;#34; ) const ( PayloadSize = 8 InitVectorSize = 16 SignatureSize = 4 EKey = &amp;#34;&amp;#34; IKey = &amp;#34;&amp;#34; UTF8 = &amp;#34;utf-8&amp;#34; ) func AddBase64Padding(base64Input string) string { var b64 string b64 = base64Input if i := len(b64) % 4; i !</description></item><item><title>Mac 升级10.12.6 mvim 打开文件报错</title><link>http://www.vimiix.com/vimiix-blog/posts/2019-09-05-mac-sierra-mvim-error/</link><pubDate>Thu, 05 Sep 2019 16:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2019-09-05-mac-sierra-mvim-error/</guid><description> 当昨天把 Mac 升级了 10.12.6 Sierra 以后，mvim 打开文件的时候就开始报错，使用该方法已解决~
报错信息 dyld: Library not loaded: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib Referenced from: /usr/local/Cellar/macvim/8.0-146/MacVim.app/Contents/bin/../MacOS/Vim Reason: image not found [1] 33114 abort mvim -v 解决方法 这个错误是 macvim 报的错，并非 vim.
➜ vimiix ~ type vim vim is an alias for mvim -v 我这里使用的 vim 指令是对 mvim 的一个别名。
使用一条指令可以解决上面的报错问题：
sudo install_name_tool -change /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/libruby.2.0.0.dylib /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/libruby.2.3.0.dylib /usr/local/Cellar/macvim/8.0-146/MacVim.app/Contents/bin/../MacOS/Vim 注意点 需要注意的是，指令最后指定的 vim 路径，一定是上面报错中 Referenced from 后面的路径。参考
相关解答 https://stackoverflow.com/questions/47278449/vim-ruby-mismatch-on-mac-high-sierra</description></item><item><title>pipenv错误解决:TypeError: "module" object is not callable</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-10-21-solution-of-pipenv-install-error/</link><pubDate>Sun, 21 Oct 2018 11:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-10-21-solution-of-pipenv-install-error/</guid><description>&lt;h3 id="软件版本">软件版本&lt;/h3>
&lt;p>今天在折腾一台新的云主机，所以我在安装环境的时候&lt;code>pip&lt;/code>和&lt;code>pipenv&lt;/code>都选择安装了最新版本&lt;/p>
&lt;p>（&lt;em>注：正是这两个版本配合才会出现下面的报错，旧版本或以后的新版本的 Pipenv 不会出现&lt;/em>）。&lt;/p>
&lt;p>具体如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>// pipenv 的版本 2018.7.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pipenv --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pipenv, version 2018.7.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>// pip 的版本 18.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip 18.1 from /usr/bin/python3.6/lib/python3.6/site-packages/pip &lt;span style="color:#f92672">(&lt;/span>python 3.6&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>macOXS中使用matplotlib遇到的问题及探究</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-10-16-explore-the-problem-of-matplotlib-on-macosx/</link><pubDate>Tue, 16 Oct 2018 11:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-10-16-explore-the-problem-of-matplotlib-on-macosx/</guid><description>&lt;p>第一次在 mac 系统上使用&lt;strong>matplotlib&lt;/strong>库的时候，在执行的时候，往往会遇到下面这样的问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ImportError: Python is not installed as a framework. balabala....
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>当然这个问题很好解决，网上有一搜就会找到如下两种解决方案：&lt;/p>
&lt;h4 id="第一种方案是在系统中设置">第一种方案是在系统中设置：&lt;/h4>
&lt;ul>
&lt;li>假设你已经通过&lt;code>pip install matplotlib&lt;/code>安装了 matplotlib，那么在你的根目录中会有一个名为&lt;code>〜/ .matplotlib&lt;/code>的目录。&lt;/li>
&lt;li>在这个目录中创建一个&lt;code>matplotlibrc&lt;/code>的文件 ,在里面添加一行代码：&lt;code>backend: TkAgg&lt;/code>，保存退出即可。&lt;/li>
&lt;/ul>
&lt;p>总结为一行 shell 命令就是：&lt;code>echo &amp;quot;backend: TkAgg&amp;quot; &amp;gt;&amp;gt; ~/.matplotlib/matplotlibrc&lt;/code>&lt;/p>
&lt;p>这种方式可以设定整个系统的 matplotlib 渲染使用的引擎，但是不好的是，代码会变得不可移植，如果服务器很多，我们需要每一台机器都去设置这个参数，这时候就需要使用第二种方案。&lt;/p>
&lt;h4 id="第二种方案是在代码中设置">第二种方案是在代码中设置：&lt;/h4>
&lt;p>在引用&lt;code>matplotlib&lt;/code>库的代码之前，添加如下两行代码（确认安装 TkInter）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matplotlib&lt;span style="color:#f92672">.&lt;/span>use(&lt;span style="color:#e6db74">&amp;#39;TkAgg&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样也可以临时的修改前面提到的 &lt;code>backend&lt;/code>变量。&lt;/p></description></item><item><title>[笔记]git push卡主不动问题记录：Git push hangs on POST git-receive-pack</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-03-18-git-push-hangs-on-chunked/</link><pubDate>Sun, 18 Mar 2018 18:20:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-03-18-git-push-hangs-on-chunked/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>昨天完成了&lt;a href="https://github.com/pythonzhichan/django-beginners-guide/blob/master/ClassBasedViews.md">《一个完整的 Django 入门指南》 - 第 6 部分&lt;/a>的翻译工作，本地在翻译的过程中，存储了十几张原文中的 &lt;code>png&lt;/code> 格式的插图。&lt;/p>
&lt;p>在 &lt;code>git push&lt;/code> 提交 &lt;strong>github&lt;/strong> 仓库的时候，终端显示写成功 100%, 但是一直卡在了下面这里没有推送成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Counting objects: 21, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Delta compression using up to &lt;span style="color:#ae81ff">8&lt;/span> threads.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Compressing objects: 100% &lt;span style="color:#f92672">(&lt;/span>21/21&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Writing objects: 100% &lt;span style="color:#f92672">(&lt;/span>21/21&lt;span style="color:#f92672">)&lt;/span>, 1018.52 KiB | 17.87 MiB/s, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 7&lt;span style="color:#f92672">)&lt;/span>, reused &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 卡在这里&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>