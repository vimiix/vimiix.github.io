<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>flask on Hi, I'm Vimiix</title><link>http://www.vimiix.com/vimiix-blog/tags/flask/</link><description>Recent content in flask on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Mon, 27 Aug 2018 17:22:48 +0000</lastBuildDate><atom:link href="http://www.vimiix.com/vimiix-blog/tags/flask/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]通过HTTPS协议运行你的Flask程序</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-08-27-running-your-flask-application-over-https/</link><pubDate>Mon, 27 Aug 2018 17:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-08-27-running-your-flask-application-over-https/</guid><description>&lt;p>我们在开发 Flask 应用程序时，通常通过运行 Flask 自带的 Web 服务器来开发测试，这个服务器提供了基本的但功能完备的 WSGI 服务器。但开发结束以后，在应用程序上线到生成环境时，有很多不得不考虑的事情，其中之一是我们是否应该要求客户端使用加密连接以增加安全性。&lt;/p>
&lt;p>人们总是问我这个问题，特别是如何在 HTTPS 协议上部署 Flask 服务器。在本文中，我将介绍几种为 Flask 应用程序添加加密的方案，从一个非常简单的可以在五秒内实现，到一个强大的就像我的网站一样可以得到一个 A +评级解决方案（&lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=blog.miguelgrinberg.com">我的网站的 SSL 分析数据&lt;/a>）。&lt;/p></description></item><item><title>[python]web框架中的代码自动重载怎么实现</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-01-08-autoreload-code-in-python/</link><pubDate>Mon, 08 Jan 2018 22:37:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-01-08-autoreload-code-in-python/</guid><description>&lt;p>在开发和调试 wsgi 应用程序时，有很多方法可以自动重新加载代码。例如，如果你使用的是&lt;code>werkzeug&lt;/code>，则只需要传&lt;code>use_reloader&lt;/code>参数即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>run_sumple(&lt;span style="color:#e6db74">&amp;#39;127.0.0.1&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>, app, use_reloader&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 Flask,实际上在内部使用 werkzeug，所以你需要设置 debug = true：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#f92672">.&lt;/span>run(debug&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>django 会在你修改任何代码的时候自动为你重新加载：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>python manage&lt;span style="color:#f92672">.&lt;/span>py runserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有这些例子在本地开发的时候都非常有用，但是，建议不要在实际生产中使用。&lt;/p>
&lt;p>作为学习，可以一起来看一下，python 是如何让代码自动地重新加载的？&lt;/p></description></item><item><title>写Flask应用时的一些优雅技巧</title><link>http://www.vimiix.com/vimiix-blog/posts/2017-12-18-some-useful-tricks-in-flask/</link><pubDate>Mon, 18 Dec 2017 18:56:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2017-12-18-some-useful-tricks-in-flask/</guid><description>&lt;h2 id="借助find_modulesimport_string优雅地注册蓝图模块">借助&lt;code>find_modules&lt;/code>,&lt;code>import_string&lt;/code>优雅地注册蓝图模块&lt;/h2>
&lt;p>&lt;a href="http://werkzeug.pocoo.org/docs/0.13/utils/#werkzeug.utils.find_modules">&lt;code>find_modules&lt;/code>&lt;/a>, &lt;a href="http://werkzeug.pocoo.org/docs/0.13/utils/#werkzeug.utils.import_string">&lt;code>import_string&lt;/code>&lt;/a>这两个函数包含在&lt;code>werkzeug.utils&lt;/code>工具包中，借助着两个工具函数可以帮助我们在更优雅的给应用注册&lt;code>blueprint&lt;/code>模块，尤其是当项目中&lt;code>blueprint&lt;/code>模块很多的时候，会节省很多行代码，看起来更加的舒服。&lt;/p></description></item></channel></rss>