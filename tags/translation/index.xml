<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>translation on Hi, I'm Vimiix</title><link>https://www.vimiix.com/tags/translation/</link><description>Recent content in translation on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Tue, 20 Feb 2024 00:50:48 +0000</lastBuildDate><atom:link href="https://www.vimiix.com/tags/translation/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]做一个拥有 Git 好习惯的开发者</title><link>https://www.vimiix.com/posts/2024-02-20-be-a-better-developer-with-these-git-good-practices/</link><pubDate>Tue, 20 Feb 2024 00:50:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2024-02-20-be-a-better-developer-with-these-git-good-practices/</guid><description>如果你是一名开发人员，你可能每天都会使用 git 作为版本控制系统。这个工具的使用对于应用程序的开发过程是至关重要的，无论是在团队协作还是单独工作。但是，常常会遇到混乱的项目库，提交的 commit 信息不明确，不能传达有用的内容，以及滥用分支等问题。了解如何正确使用 git 并遵循良好的实践对于那些想要在就业市场中脱颖而出的人来说是必不可少的。
Git 分支的命名约定 当我们在处理代码版本控制时，我们应该遵循的一个好的习惯，就是为分支、提交、拉取请求等使用清晰和描述性的名称。确保所有团队成员都有一个简洁的工作流程是至关重要的。除了提高工作效率之外，记录项目的开发过程也简化了团队合作。通过遵循这些实践，你很快就会获益其中。
基于此，开发者社区创建了一些分支命名的约定，你可以在项目中遵循这些约定。虽然遵循下列规则不是硬性的要求，但它们可以帮助你提高开发技能。
使用小写字母：分支名称不要用大写字母，强制小写; 连字符分隔：如果分支名称包含多个单词，请使用连字符将它们分开，遵循短横线命名法。避免使用帕斯卡命名法、驼峰命名法或蛇形命名法; (a-z, 0-9)：分支名称中只使用字母数字字符和连字符，避免使用其他字符; 不要使用连续的连字符(&amp;ndash;)：这种做法可能令人困惑。例如，如果你有分支类型(如feature, bugfix, hotfix等)，使用斜杠(/)代替; 避免在分支名称的末尾使用连字符：这是没有意义的，因为连字符分隔单词，最后没有单词要分隔; 最重要的：使用描述性的、简洁的、清晰的名称来定义分支上做了什么; 不好的分支命名：
fixSidebar feature-new-sidebar- FeatureNewSidebar feat_add_sidebar 好的分支名：
feature/new-sidebar add-new-sidebar hotfix/interval-query-param-on-get-historical-data 分支名称约定前缀 有时分支的目的并不明确。它可以是一个新特性、错误修复、文档更新或其他任何东西。为了解决这个问题，通常的做法是在分支名称上使用前缀来快速解释分支的目的。
feature：它表达了一个将被开发的新功能。例如：feature/add-filters; release：用于准备新版本的发布。release/ 前缀通常用于在合并分支主版本的新更新以创建版本之前执行诸如最后修改和修订之类的任务。例如，release/v3.3.1-beta; bugfix：它表达的信息是，你正在解决代码中的一个bug，而且它通常与一个问题有关。例如，bugfix/sign-in-flow; hotfix：类似于 bugfix，但它与修复生产环境中存在的关键错误有关。例如，hotfix/cors-error; docs：写一些文档。例如，docs/quick-start; 如果你在工作中使用任务管理相关的工具，如Jira, Trello, ClickUp，或任何类似的工具，可以考虑先创建用户故事卡，每张卡有一个数字相关联。所以，通常可以把这些卡的编号用在分支名称的前缀中。例如：
feature/T-531-add-sidebar docs/T-789-update-readme hotfix/T-142-security-path 提交信息 Commit message 接下来，我们来讨论一下提交消息。不幸的是，我们经常会看到这样的提交信息，如：“added a lot of things”或“Pikachu, I choose you”等（是的，我曾经发现一个项目的提交信息与poksammon战斗有关）。
提交信息在开发过程中非常重要，创造一段美好的历史会在你的人生旅途中给你带来很多帮助。和分支一样，社区也有对于提交信息的规范约定，你可以在下面了解到:
提交消息有三个重要部分:主题 Subject、描述 Description和页脚 Footer。提交的主题是必需的，并且定义了提交的目的。描述(主体)用于为提交的目的提供额外的上下文和解释。最后是页脚，通常用于元数据，如分配提交。虽然同时使用描述和页脚被认为是一种很好的做法，但这不是必需的。 在主题行中使用祈使句。 例如： Add README.md ✅; Added README.md ❌; Adding README.md ❌;</description></item><item><title>[译]Richardson成熟度模型</title><link>https://www.vimiix.com/posts/2020-02-21-richardson-model/</link><pubDate>Fri, 21 Feb 2020 16:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2020-02-21-richardson-model/</guid><description>&lt;blockquote>
&lt;p>原文链接：&lt;a href="https://martinfowler.com/articles/richardsonMaturityModel.html">https://martinfowler.com/articles/richardsonMaturityModel.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="迈向-rest-的荣耀之巅">迈向 REST 的荣耀之巅&lt;/h3>
&lt;p>Leonard Richardson 提出的一个模型，将实现 REST 方法的主要元素分解为三个步骤，分别包括：资源（Resources）、HTTP 动词(HTTP Verbs，如&lt;code>GET&lt;/code>、&lt;code>POST&lt;/code>等)和超媒体控制（Hypermedia Controls）。&lt;/p>
&lt;p>在&lt;a href="https://www.amazon.cn/dp/0596805829/ref=sr_1_1?ie=UTF8&amp;amp;qid=1551228104&amp;amp;sr=8-1&amp;amp;keywords=REST+in+Practice">Rest In Practice&lt;/a>一书中，解释了如何使用 Restful Web Service 来处理企业面临的许多集成问题。本书的核心观点是，Web 就是一个大规模可扩展的分布式系统存在、并可以很好的工作的证明，而我们可以根据这一观点更容易地构建集成系统。&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="https://static.vimiix.com/uPic/2021-04-06/5hdvom.png" alt="" />
&lt;/figure>
&lt;/p></description></item><item><title>[译]实践出真知</title><link>https://www.vimiix.com/posts/2018-10-10-dont-just-learn-a-new-language-framework-implement-it-as-a-running-open-source-project/</link><pubDate>Wed, 10 Oct 2018 23:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-10-10-dont-just-learn-a-new-language-framework-implement-it-as-a-running-open-source-project/</guid><description>&lt;p>Aristotle（亚里士多德），希腊著名的哲学家和科学家，曾经说过：“对于那些我们在能做到之前必须学习如何做的事情，我们需要边做边学 (&lt;em>For the things we have to learn before we can do them, we learn by doing them.&lt;/em>)”。想象一下，假如你已经读过 3 本关于骑行的书了，然后有人给你一辆自行车并让你骑它，你能骑吗？很显然，答案是“不能”。这无关乎你曾经读了多少关于骑行的书或你看了多少相关视频的事情。它需要你真正骑上一辆自行车，去保持平衡，去学习脚，手和眼睛的协调配合才能掌握的一件事情。学习新技术，新语言或框架同样也是如此。&lt;/p>
&lt;p>如果现在你在想：我都不会某个语言或某个框架，我要怎么去实现这个开源项目呢，那么先停止抱怨。也许你是技术或编程的新手，但你需要知道如何去学习新事物。学习新东西的最好方法就是实践。这篇文章将重点关注普适通用的方法。它会帮助你从我想要学习&amp;rsquo;X&amp;rsquo;到我有一个项目在&amp;rsquo;X&amp;rsquo;运行，所以继续往下看。如果你决定通过做一个项目来学习新东西，那就把它开源吧。Github 是托管你的开源项目的首选服务商。在其上你可以享受很多的免费服务。这篇文章的编写主要面向编程起步者，但对于经验丰富的软件工程师也同样有用。&lt;/p></description></item><item><title>[译]通过HTTPS协议运行你的Flask程序</title><link>https://www.vimiix.com/posts/2018-08-27-running-your-flask-application-over-https/</link><pubDate>Mon, 27 Aug 2018 17:22:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-08-27-running-your-flask-application-over-https/</guid><description>&lt;p>我们在开发 Flask 应用程序时，通常通过运行 Flask 自带的 Web 服务器来开发测试，这个服务器提供了基本的但功能完备的 WSGI 服务器。但开发结束以后，在应用程序上线到生成环境时，有很多不得不考虑的事情，其中之一是我们是否应该要求客户端使用加密连接以增加安全性。&lt;/p>
&lt;p>人们总是问我这个问题，特别是如何在 HTTPS 协议上部署 Flask 服务器。在本文中，我将介绍几种为 Flask 应用程序添加加密的方案，从一个非常简单的可以在五秒内实现，到一个强大的就像我的网站一样可以得到一个 A +评级解决方案（&lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=blog.miguelgrinberg.com">我的网站的 SSL 分析数据&lt;/a>）。&lt;/p></description></item><item><title>[译]关于python字典类型最疯狂的表达方式</title><link>https://www.vimiix.com/posts/2017-12-28-python-mystery-dict-expression/</link><pubDate>Thu, 28 Dec 2017 10:31:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-28-python-mystery-dict-expression/</guid><description>&lt;p>&lt;a href="https://juejin.im/post/5a4459b05188257d6a7ed76b">
&lt;figure>
&lt;img src="https://badge.juejin.im/entry/5a4459c9f265da43112080ea/likes.svg?style=flat-square" alt="" />
&lt;/figure>
&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>一篇来自 &lt;a href="https://dbader.org/blog/python-mystery-dict-expression">Dan Bader&lt;/a> 的有趣的博文，一起来学习一下，如何去研究一个意外的 Python 现象。&lt;/p>
&lt;/blockquote></description></item><item><title>[译]python中的global和nonlocal的实践</title><link>https://www.vimiix.com/posts/2017-12-14-global-and-nonlocal-variable-in-python/</link><pubDate>Thu, 14 Dec 2017 18:51:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-14-global-and-nonlocal-variable-in-python/</guid><description>&lt;blockquote>
&lt;p>今天的博文翻译是关于 python 中 global 和 nonlocal 两个关键字的用法，原文的作者是来自孟加拉国的&lt;a href="https://twitter.com/subeen">Tamim Shahriar&lt;/a>，他的&lt;a href="http://love-python.blogspot.com.br/?view=classic">博客&lt;/a>非常适合新手朋友去阅读，都是简短而有意义的 python 实践。&lt;/p>
&lt;/blockquote>
&lt;p>我们大多数人都对 Python 中的全局变量很熟悉了。如果我们在一个模块中声明全局变量，模块内部的任何函数都可以访问这个全局变量。（模块可以理解为一个&lt;code>python&lt;/code>文件或&lt;code>.py&lt;/code>文件）&lt;/p></description></item><item><title>[译]Python的enumerate()函数揭秘</title><link>https://www.vimiix.com/posts/2017-12-13-pythons-enumerate-function-demystified/</link><pubDate>Wed, 13 Dec 2017 19:51:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-13-pythons-enumerate-function-demystified/</guid><description>&lt;blockquote>
&lt;p>今天的原文的作者是来自国外的一位 Python“布道师”&lt;a href="https://dbader.org">Dan Bader&lt;/a>，他的博客完全就是一个个人品牌的学校。有跟多 Python 技巧，有很多他录制的 Youtube 视频，国内的 Pythonista 们，不妨订阅一下他的每周邮件推送。&lt;a href="https://www.getdrip.com/forms/80014959/submissions/new">订阅链接&lt;/a>&lt;/p>
&lt;p>今天的译文是他博客中的一篇，点击&lt;a href="https://dbader.org/blog/python-enumerate">查看原文&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>如何以去写以及为什么你应该使用 Python 中的内置枚举函数来编写更干净更加 Pythonic 的循环语句？&lt;/p></description></item><item><title>[译]编码，编码，编码!提高编程技能的唯一途径</title><link>https://www.vimiix.com/posts/2017-12-12-code-code-code/</link><pubDate>Tue, 12 Dec 2017 20:51:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-12-12-code-code-code/</guid><description>&lt;blockquote>
&lt;p>最近博客没什么更新。工作上新项目马上要开始了，我很清楚自己的技术积累很匮乏，需要学习的东西太多了，但又不知该从何学起。以前听过一句话，不知道怎么规划学习的时候，只管学就好了。最近家里也储备了一批的新书，都还没来得及看，所以暂时不想怎么规划博客了，接下来到过年的这两个月，博客的文章将都是国外博客的译文，希望可以学习大神经验的同时提升自己的英文水平。&lt;/p>
&lt;p>今天是第一篇，来自前美国宇航局工程师，python 大神&lt;a href="https://github.com/pydanny">Daniel Roy Greenfeld&lt;/a>的博客中的一篇&lt;a href="https://www.pydanny.com/code-code-code.html">《code,code,code》&lt;/a>,旨在帮助新手程序员知道如何才能提高自己的编程技能。&lt;/p>
&lt;/blockquote></description></item><item><title>[译]Python3:变量注释</title><link>https://www.vimiix.com/posts/2017-11-02-python3-variable-annotation/</link><pubDate>Thu, 02 Nov 2017 13:12:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2017-11-02-python3-variable-annotation/</guid><description>&lt;p>Python 在 3.6 版中添加了一个叫做&lt;strong>变量注释&lt;/strong>的语法。变量注释简单讲就是对于类型提示的增强，这个概念是在 Python3.5 中开始引入的。变量注释的完整解释在&lt;a href="https://www.python.org/dev/peps/pep-0526">PEP 526&lt;/a>中进行了详细说明。在本文中，我们将将要的回顾一下类型提示，然后再介绍新的变量注释语法。&lt;/p></description></item></channel></rss>