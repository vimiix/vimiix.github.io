<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jinja2 on Hi, I'm Vimiix</title><link>https://vimiix.com/tags/jinja2/</link><description>Recent content in jinja2 on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Wed, 15 Nov 2017 00:59:48 +0000</lastBuildDate><atom:link href="https://vimiix.com/tags/jinja2/index.xml" rel="self" type="application/rss+xml"/><item><title>脱离Flask上下文，使用jinja2渲染html模板</title><link>https://vimiix.com/posts/2017-11-15-use-jinjia2-without-flask/</link><pubDate>Wed, 15 Nov 2017 00:59:48 +0000</pubDate><guid>https://vimiix.com/posts/2017-11-15-use-jinjia2-without-flask/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>首先，如果一个正常的 flask 带路由的接口，我们是不需要关心上下文对象的，Flask 做了很多“魔术”的方法，当一个 Flask 应用接收到一个请求的时候，它会在将逻辑委托给你的视图函数之前，创建好一个上下文对象。&lt;/p>
&lt;p>当我们返回的时候调用&lt;code>render_template(template, **context)&lt;/code>，就可以正常的渲染界面返回，在这个函数中，如果看一下源码就会发现，返回渲染之前，会创建一个 ctx 去获得当前环境的&lt;code>app&lt;/code>变量。然后通过这个 ctx 去渲染传进来的&lt;code>context&lt;/code>参数列表。&lt;/p></description></item></channel></rss>