<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>context on Hi, I'm Vimiix</title><link>https://www.vimiix.com/tags/context/</link><description>Recent content in context on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2024, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Wed, 18 Jul 2018 00:56:48 +0000</lastBuildDate><atom:link href="https://www.vimiix.com/tags/context/index.xml" rel="self" type="application/rss+xml"/><item><title>浅谈Python中的上下文管理</title><link>https://www.vimiix.com/posts/2018-07-17-learn-contextlib/</link><pubDate>Wed, 18 Jul 2018 00:56:48 +0000</pubDate><guid>https://www.vimiix.com/posts/2018-07-17-learn-contextlib/</guid><description>&lt;h2 id="with-语法">with 语法&lt;/h2>
&lt;p>平常在写 Python 代码的时候，经常会用到&lt;code>with&lt;/code> 来处理一个上下文环境，比如文件的打开关闭，数据库的连接关闭等等。&lt;/p>
&lt;p>&lt;code>with&lt;/code>语法的使用，需要我们处理的对象实现&lt;code>__enter__&lt;/code>和&lt;code>__exit__&lt;/code>两个魔术方法来支持。&lt;code>__enter__&lt;/code>函数处理逻辑函数之前需要做的事情，并返回操作对象作为&lt;code>as&lt;/code>后面的变量，&lt;code>__exit__&lt;/code>函数处理当代码离开&lt;code>with&lt;/code>代码块以后的事情。&lt;/p>
&lt;p>&lt;code>with&lt;/code>语法非常方便的让我使用资源并且不用操心忘记后续操作所带来的隐患。&lt;/p></description></item></channel></rss>