<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tools on Hi, I'm Vimiix</title><link>http://www.vimiix.com/vimiix-blog/tags/tools/</link><description>Recent content in tools on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Fri, 15 Dec 2023 00:50:48 +0000</lastBuildDate><atom:link href="http://www.vimiix.com/vimiix-blog/tags/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>SSX，一个有记忆的 ssh 客户端</title><link>http://www.vimiix.com/vimiix-blog/posts/2023-12-15-ssx/</link><pubDate>Fri, 15 Dec 2023 00:50:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2023-12-15-ssx/</guid><description>需求来源 对于一个后端程序员来说，在工作中免不了要和繁杂的服务器打交道，ssh 是不可或缺的开发工具。但每次登录都需要输入密码的行为，对于认为一切皆可自动化的程序员来说，肯定是有点繁琐的（如果您是使用图形化界面的用户可忽略）。
所以我在前段时间考虑，我应该自己实现一个 ssh 客户端，它不需要拥有许多复杂的功能，只需要满足我以下这几个需求即可满足日常使用：
和 ssh 保持差不多的使用习惯 仅在第一次登录时询问我密码，后续使用无需再提供密码 可以给服务器它任意的标签，这样我就可以自由地通过IP 或者标签来登录 于是乎，近期我在业余时间就设计并编写了 ssx 这个轻量级的具有记忆的 ssh 客户端。它完美的实现了上面我所需要的功能，也已经被我愉快的应用到了日常的开发中。
使用方式 下面就简单介绍一下 ssx 的使用方式。
ssx 是通过 golang 开发的一个独立的二进制文件，安装方式就是从 release 页面下载对应平台的软件包，解压后把 ssx 二进制放到系统的任意目录下，这里我习惯放到 /usr/local/bin 目录下，如果你选择其他目录下，需要确保存放的目录添加到 $PATH 环境变量中，这样后续使用我们就不用再添加路径前缀，直接通过 ssx 命令就可以运行了。
登录服务器 使用 ssx 登录服务器的时候，基本和 ssh 使用习惯一致，下面是基本命令模式：
ssx [-s] [USER@]HOST[:PORT] [-k IDENTITY_FILE] 在这个命令中，USER 是可以省略的，如果省略则是系统当前用户名；PORT 是可以省略的，默认是 22，-k IDENTITY_FILE 代表如果是使用私钥登录，则通过 -k 来指定私钥的路径，也是可以省略的，默认是 ~/.ssh/id_rsa，当然了，前提是这个文件存在。所以最精简的登录命令就是：ssx &amp;lt;ip&amp;gt;
当首次登录，不存在可用私钥时，会通过交互方式来让用户输入密码，一旦登录成功，这个密码就会被 ssx 保存到本地的数据文件中 (默认为 ~/.ssx/db， 可通过环境变量 SSX_DB_PATH 进行自定义)，下次登录时，仍然执行 ssx &amp;lt;ip&amp;gt; 即可自动登录。
注意，登录过的服务器，再次登录时，我嫌输入全部 IP 比较麻烦，所以 ssx 支持输入 IP 中的部分字符，自动搜索匹配进行登录。</description></item></channel></rss>