<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Hi, I'm Vimiix</title><link>http://www.vimiix.com/vimiix-blog/tags/git/</link><description>Recent content in git on Hi, I'm Vimiix</description><generator>Hugo -- gohugo.io</generator><language>cn-zh</language><copyright>Copyright (c) 2017-2021, Vimiix Yao; All rights reserved</copyright><lastBuildDate>Tue, 20 Feb 2024 00:50:48 +0000</lastBuildDate><atom:link href="http://www.vimiix.com/vimiix-blog/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]做一个拥有 Git 好习惯的开发者</title><link>http://www.vimiix.com/vimiix-blog/posts/2024-02-20-be-a-better-developer-with-these-git-good-practices/</link><pubDate>Tue, 20 Feb 2024 00:50:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2024-02-20-be-a-better-developer-with-these-git-good-practices/</guid><description>如果你是一名开发人员，你可能每天都会使用 git 作为版本控制系统。这个工具的使用对于应用程序的开发过程是至关重要的，无论是在团队协作还是单独工作。但是，常常会遇到混乱的项目库，提交的 commit 信息不明确，不能传达有用的内容，以及滥用分支等问题。了解如何正确使用 git 并遵循良好的实践对于那些想要在就业市场中脱颖而出的人来说是必不可少的。
Git 分支的命名约定 当我们在处理代码版本控制时，我们应该遵循的一个好的习惯，就是为分支、提交、拉取请求等使用清晰和描述性的名称。确保所有团队成员都有一个简洁的工作流程是至关重要的。除了提高工作效率之外，记录项目的开发过程也简化了团队合作。通过遵循这些实践，你很快就会获益其中。
基于此，开发者社区创建了一些分支命名的约定，你可以在项目中遵循这些约定。虽然遵循下列规则不是硬性的要求，但它们可以帮助你提高开发技能。
使用小写字母：分支名称不要用大写字母，强制小写; 连字符分隔：如果分支名称包含多个单词，请使用连字符将它们分开，遵循短横线命名法。避免使用帕斯卡命名法、驼峰命名法或蛇形命名法; (a-z, 0-9)：分支名称中只使用字母数字字符和连字符，避免使用其他字符; 不要使用连续的连字符(&amp;ndash;)：这种做法可能令人困惑。例如，如果你有分支类型(如feature, bugfix, hotfix等)，使用斜杠(/)代替; 避免在分支名称的末尾使用连字符：这是没有意义的，因为连字符分隔单词，最后没有单词要分隔; 最重要的：使用描述性的、简洁的、清晰的名称来定义分支上做了什么; 不好的分支命名：
fixSidebar feature-new-sidebar- FeatureNewSidebar feat_add_sidebar 好的分支名：
feature/new-sidebar add-new-sidebar hotfix/interval-query-param-on-get-historical-data 分支名称约定前缀 有时分支的目的并不明确。它可以是一个新特性、错误修复、文档更新或其他任何东西。为了解决这个问题，通常的做法是在分支名称上使用前缀来快速解释分支的目的。
feature：它表达了一个将被开发的新功能。例如：feature/add-filters; release：用于准备新版本的发布。release/ 前缀通常用于在合并分支主版本的新更新以创建版本之前执行诸如最后修改和修订之类的任务。例如，release/v3.3.1-beta; bugfix：它表达的信息是，你正在解决代码中的一个bug，而且它通常与一个问题有关。例如，bugfix/sign-in-flow; hotfix：类似于 bugfix，但它与修复生产环境中存在的关键错误有关。例如，hotfix/cors-error; docs：写一些文档。例如，docs/quick-start; 如果你在工作中使用任务管理相关的工具，如Jira, Trello, ClickUp，或任何类似的工具，可以考虑先创建用户故事卡，每张卡有一个数字相关联。所以，通常可以把这些卡的编号用在分支名称的前缀中。例如：
feature/T-531-add-sidebar docs/T-789-update-readme hotfix/T-142-security-path 提交信息 Commit message 接下来，我们来讨论一下提交消息。不幸的是，我们经常会看到这样的提交信息，如：“added a lot of things”或“Pikachu, I choose you”等（是的，我曾经发现一个项目的提交信息与poksammon战斗有关）。
提交信息在开发过程中非常重要，创造一段美好的历史会在你的人生旅途中给你带来很多帮助。和分支一样，社区也有对于提交信息的规范约定，你可以在下面了解到:
提交消息有三个重要部分:主题 Subject、描述 Description和页脚 Footer。提交的主题是必需的，并且定义了提交的目的。描述(主体)用于为提交的目的提供额外的上下文和解释。最后是页脚，通常用于元数据，如分配提交。虽然同时使用描述和页脚被认为是一种很好的做法，但这不是必需的。 在主题行中使用祈使句。 例如： Add README.md ✅; Added README.md ❌; Adding README.md ❌;</description></item><item><title>快速切换本地Git用户记录</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-11-08-change-git-account-by-script/</link><pubDate>Thu, 08 Nov 2018 23:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-11-08-change-git-account-by-script/</guid><description>&lt;p>现在大部分的科技公司开发模式，都是基于 Git 进行多人协作开发。所以，对于我们每一个开发者来说，Git 的操作就是必不可少的技能了（不是锦上添花，而是必不可少）。对于 Git 的操作，不是本次记录的内容，网上的&lt;a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80">教程&lt;/a>可以在官网找到。&lt;/p>
&lt;p>今天我想记录一下我本机多用户管理的一点小操作。&lt;/p>
&lt;p>当每进入一家新公司的时候，总会在新公司领到一个新的公司邮箱，基本上这个邮箱也就是你在公司期间进行代码开发的 git 账户。这时候，加上我们平时在 &lt;a href="https://github.com">GitHub&lt;/a> 的账户，就会有两个账户需要切换使用。&lt;/p>
&lt;p>下面是我个人的一点小技巧记录，不一定是最好的，但只要自己用着方便就 OK，如果此时看文章的你有好的方法的话，可以请在讨论区交流。&lt;/p></description></item><item><title>Git开发记录-合并多条commit最佳实践</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-08-13-git-best-practice/</link><pubDate>Mon, 13 Aug 2018 19:22:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-08-13-git-best-practice/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>常规的多人基于 GIT 协作开发的时候，都是遵循先 fork 一份主版本代码到自己的账号下面，然后基于本账户的版本，开分支来开发功能或修 Bug，完成以后再讲修改的内容，提交一个完整的 PR 贡献回主版本。&lt;/p>
&lt;p>在本分支上开发的过程中，有时候不得不先提交到自己账号下面的克隆版本中来测试（比如豆瓣的&lt;code>dae pre&lt;/code>，无法在本地生成预览，需要提交到远端），我们不能保证一次性提交就做到完美，避免不了会往复的修改后提交，这样的一次次测试用的 commit 属于是冗余的琐碎信息，对于主版本迭代是没有价值的。如果直接在基于该分支提交 PR，甚至被&lt;code>merge&lt;/code>到&lt;code>upstream/master&lt;/code>主版本中，这些不必要的 commit 信息也会包含进主版本中。这当然不是一个理想的迭代方式。&lt;/p>
&lt;p>现在问题明确以后，就是一个目标：&lt;strong>将这些开发中的所有 commit 都合并为一条有意义的 commit 信息提交给主版本&lt;/strong>。&lt;/p></description></item><item><title>[笔记]git push卡主不动问题记录：Git push hangs on POST git-receive-pack</title><link>http://www.vimiix.com/vimiix-blog/posts/2018-03-18-git-push-hangs-on-chunked/</link><pubDate>Sun, 18 Mar 2018 18:20:48 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2018-03-18-git-push-hangs-on-chunked/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>昨天完成了&lt;a href="https://github.com/pythonzhichan/django-beginners-guide/blob/master/ClassBasedViews.md">《一个完整的 Django 入门指南》 - 第 6 部分&lt;/a>的翻译工作，本地在翻译的过程中，存储了十几张原文中的 &lt;code>png&lt;/code> 格式的插图。&lt;/p>
&lt;p>在 &lt;code>git push&lt;/code> 提交 &lt;strong>github&lt;/strong> 仓库的时候，终端显示写成功 100%, 但是一直卡在了下面这里没有推送成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Counting objects: 21, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Delta compression using up to &lt;span style="color:#ae81ff">8&lt;/span> threads.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Compressing objects: 100% &lt;span style="color:#f92672">(&lt;/span>21/21&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Writing objects: 100% &lt;span style="color:#f92672">(&lt;/span>21/21&lt;span style="color:#f92672">)&lt;/span>, 1018.52 KiB | 17.87 MiB/s, &lt;span style="color:#66d9ef">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 7&lt;span style="color:#f92672">)&lt;/span>, reused &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 卡在这里&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Linux-git branch用法(查看、新建、删除、重命名)</title><link>http://www.vimiix.com/vimiix-blog/posts/2017-03-08-git-branch-usage/</link><pubDate>Wed, 08 Mar 2017 10:41:08 +0000</pubDate><guid>http://www.vimiix.com/vimiix-blog/posts/2017-03-08-git-branch-usage/</guid><description>&lt;p>
&lt;figure>
&lt;img src="https://static.vimiix.com/uPic/2021-04-06/KQLlUb.jpg" alt="" />
&lt;/figure>
&lt;/p></description></item></channel></rss>